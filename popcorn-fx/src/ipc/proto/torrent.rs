// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc 29.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `torrent.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:fx.ipc.proto.Torrent)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Torrent {
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.Torrent.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Torrent {
    fn default() -> &'a Torrent {
        <Torrent as ::protobuf::Message>::default_instance()
    }
}

impl Torrent {
    pub fn new() -> Torrent {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Torrent {
    const NAME: &'static str = "Torrent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Torrent {
        Torrent::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Torrent {
        static instance: Torrent = Torrent {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `Torrent`
pub mod torrent {
    // @@protoc_insertion_point(message:fx.ipc.proto.Torrent.Health)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Health {
        // message fields
        // @@protoc_insertion_point(field:fx.ipc.proto.Torrent.Health.state)
        pub state: ::protobuf::EnumOrUnknown<health::State>,
        // @@protoc_insertion_point(field:fx.ipc.proto.Torrent.Health.ratio)
        pub ratio: f32,
        // @@protoc_insertion_point(field:fx.ipc.proto.Torrent.Health.seeds)
        pub seeds: u32,
        // @@protoc_insertion_point(field:fx.ipc.proto.Torrent.Health.leechers)
        pub leechers: u32,
        // special fields
        // @@protoc_insertion_point(special_field:fx.ipc.proto.Torrent.Health.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Health {
        fn default() -> &'a Health {
            <Health as ::protobuf::Message>::default_instance()
        }
    }

    impl Health {
        pub fn new() -> Health {
            ::std::default::Default::default()
        }
    }

    impl ::protobuf::Message for Health {
        const NAME: &'static str = "Health";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.state = is.read_enum_or_unknown()?;
                    },
                    21 => {
                        self.ratio = is.read_float()?;
                    },
                    24 => {
                        self.seeds = is.read_uint32()?;
                    },
                    32 => {
                        self.leechers = is.read_uint32()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.state != ::protobuf::EnumOrUnknown::new(health::State::UNKNOWN) {
                my_size += ::protobuf::rt::int32_size(1, self.state.value());
            }
            if self.ratio != 0. {
                my_size += 1 + 4;
            }
            if self.seeds != 0 {
                my_size += ::protobuf::rt::uint32_size(3, self.seeds);
            }
            if self.leechers != 0 {
                my_size += ::protobuf::rt::uint32_size(4, self.leechers);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.state != ::protobuf::EnumOrUnknown::new(health::State::UNKNOWN) {
                os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.state))?;
            }
            if self.ratio != 0. {
                os.write_float(2, self.ratio)?;
            }
            if self.seeds != 0 {
                os.write_uint32(3, self.seeds)?;
            }
            if self.leechers != 0 {
                os.write_uint32(4, self.leechers)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Health {
            Health::new()
        }

        fn clear(&mut self) {
            self.state = ::protobuf::EnumOrUnknown::new(health::State::UNKNOWN);
            self.ratio = 0.;
            self.seeds = 0;
            self.leechers = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Health {
            static instance: Health = Health {
                state: ::protobuf::EnumOrUnknown::from_i32(0),
                ratio: 0.,
                seeds: 0,
                leechers: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    /// Nested message and enums of message `Health`
    pub mod health {
        #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
        // @@protoc_insertion_point(enum:fx.ipc.proto.Torrent.Health.State)
        pub enum State {
            // @@protoc_insertion_point(enum_value:fx.ipc.proto.Torrent.Health.State.UNKNOWN)
            UNKNOWN = 0,
            // @@protoc_insertion_point(enum_value:fx.ipc.proto.Torrent.Health.State.BAD)
            BAD = 1,
            // @@protoc_insertion_point(enum_value:fx.ipc.proto.Torrent.Health.State.MEDIUM)
            MEDIUM = 2,
            // @@protoc_insertion_point(enum_value:fx.ipc.proto.Torrent.Health.State.GOOD)
            GOOD = 3,
            // @@protoc_insertion_point(enum_value:fx.ipc.proto.Torrent.Health.State.EXCELLENT)
            EXCELLENT = 4,
        }

        impl ::protobuf::Enum for State {
            const NAME: &'static str = "State";

            fn value(&self) -> i32 {
                *self as i32
            }

            fn from_i32(value: i32) -> ::std::option::Option<State> {
                match value {
                    0 => ::std::option::Option::Some(State::UNKNOWN),
                    1 => ::std::option::Option::Some(State::BAD),
                    2 => ::std::option::Option::Some(State::MEDIUM),
                    3 => ::std::option::Option::Some(State::GOOD),
                    4 => ::std::option::Option::Some(State::EXCELLENT),
                    _ => ::std::option::Option::None
                }
            }

            fn from_str(str: &str) -> ::std::option::Option<State> {
                match str {
                    "UNKNOWN" => ::std::option::Option::Some(State::UNKNOWN),
                    "BAD" => ::std::option::Option::Some(State::BAD),
                    "MEDIUM" => ::std::option::Option::Some(State::MEDIUM),
                    "GOOD" => ::std::option::Option::Some(State::GOOD),
                    "EXCELLENT" => ::std::option::Option::Some(State::EXCELLENT),
                    _ => ::std::option::Option::None
                }
            }

            const VALUES: &'static [State] = &[
                State::UNKNOWN,
                State::BAD,
                State::MEDIUM,
                State::GOOD,
                State::EXCELLENT,
            ];
        }

        impl ::std::default::Default for State {
            fn default() -> Self {
                State::UNKNOWN
            }
        }

    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:fx.ipc.proto.Torrent.Error)
    pub enum Error {
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Torrent.Error.INVALID_URL)
        INVALID_URL = 0,
    }

    impl ::protobuf::Enum for Error {
        const NAME: &'static str = "Error";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Error> {
            match value {
                0 => ::std::option::Option::Some(Error::INVALID_URL),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Error> {
            match str {
                "INVALID_URL" => ::std::option::Option::Some(Error::INVALID_URL),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Error] = &[
            Error::INVALID_URL,
        ];
    }

    impl ::std::default::Default for Error {
        fn default() -> Self {
            Error::INVALID_URL
        }
    }

}

// @@protoc_insertion_point(message:fx.ipc.proto.TorrentHealthRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TorrentHealthRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.TorrentHealthRequest.uri)
    pub uri: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.TorrentHealthRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TorrentHealthRequest {
    fn default() -> &'a TorrentHealthRequest {
        <TorrentHealthRequest as ::protobuf::Message>::default_instance()
    }
}

impl TorrentHealthRequest {
    pub fn new() -> TorrentHealthRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for TorrentHealthRequest {
    const NAME: &'static str = "TorrentHealthRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.uri = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.uri.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uri);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.uri.is_empty() {
            os.write_string(1, &self.uri)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TorrentHealthRequest {
        TorrentHealthRequest::new()
    }

    fn clear(&mut self) {
        self.uri.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TorrentHealthRequest {
        static instance: TorrentHealthRequest = TorrentHealthRequest {
            uri: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.TorrentHealthResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TorrentHealthResponse {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.TorrentHealthResponse.result)
    pub result: ::protobuf::EnumOrUnknown<super::message::response::Result>,
    // @@protoc_insertion_point(field:fx.ipc.proto.TorrentHealthResponse.health)
    pub health: ::protobuf::MessageField<torrent::Health>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.TorrentHealthResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TorrentHealthResponse {
    fn default() -> &'a TorrentHealthResponse {
        <TorrentHealthResponse as ::protobuf::Message>::default_instance()
    }
}

impl TorrentHealthResponse {
    pub fn new() -> TorrentHealthResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for TorrentHealthResponse {
    const NAME: &'static str = "TorrentHealthResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = is.read_enum_or_unknown()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.health)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.result != ::protobuf::EnumOrUnknown::new(super::message::response::Result::OK) {
            my_size += ::protobuf::rt::int32_size(1, self.result.value());
        }
        if let Some(v) = self.health.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.result != ::protobuf::EnumOrUnknown::new(super::message::response::Result::OK) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.result))?;
        }
        if let Some(v) = self.health.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TorrentHealthResponse {
        TorrentHealthResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::protobuf::EnumOrUnknown::new(super::message::response::Result::OK);
        self.health.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TorrentHealthResponse {
        static instance: TorrentHealthResponse = TorrentHealthResponse {
            result: ::protobuf::EnumOrUnknown::from_i32(0),
            health: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.CalculateTorrentHealthRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CalculateTorrentHealthRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.CalculateTorrentHealthRequest.seeds)
    pub seeds: u32,
    // @@protoc_insertion_point(field:fx.ipc.proto.CalculateTorrentHealthRequest.leechers)
    pub leechers: u32,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.CalculateTorrentHealthRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CalculateTorrentHealthRequest {
    fn default() -> &'a CalculateTorrentHealthRequest {
        <CalculateTorrentHealthRequest as ::protobuf::Message>::default_instance()
    }
}

impl CalculateTorrentHealthRequest {
    pub fn new() -> CalculateTorrentHealthRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CalculateTorrentHealthRequest {
    const NAME: &'static str = "CalculateTorrentHealthRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.seeds = is.read_uint32()?;
                },
                16 => {
                    self.leechers = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.seeds != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.seeds);
        }
        if self.leechers != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.leechers);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.seeds != 0 {
            os.write_uint32(1, self.seeds)?;
        }
        if self.leechers != 0 {
            os.write_uint32(2, self.leechers)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CalculateTorrentHealthRequest {
        CalculateTorrentHealthRequest::new()
    }

    fn clear(&mut self) {
        self.seeds = 0;
        self.leechers = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CalculateTorrentHealthRequest {
        static instance: CalculateTorrentHealthRequest = CalculateTorrentHealthRequest {
            seeds: 0,
            leechers: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.CalculateTorrentHealthResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CalculateTorrentHealthResponse {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.CalculateTorrentHealthResponse.health)
    pub health: ::protobuf::MessageField<torrent::Health>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.CalculateTorrentHealthResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CalculateTorrentHealthResponse {
    fn default() -> &'a CalculateTorrentHealthResponse {
        <CalculateTorrentHealthResponse as ::protobuf::Message>::default_instance()
    }
}

impl CalculateTorrentHealthResponse {
    pub fn new() -> CalculateTorrentHealthResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CalculateTorrentHealthResponse {
    const NAME: &'static str = "CalculateTorrentHealthResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.health)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.health.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.health.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CalculateTorrentHealthResponse {
        CalculateTorrentHealthResponse::new()
    }

    fn clear(&mut self) {
        self.health.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CalculateTorrentHealthResponse {
        static instance: CalculateTorrentHealthResponse = CalculateTorrentHealthResponse {
            health: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}
