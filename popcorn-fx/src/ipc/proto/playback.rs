// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc 29.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `playback.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:fx.ipc.proto.ControlEvent)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ControlEvent {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.ControlEvent.event)
    pub event: ::protobuf::EnumOrUnknown<control_event::Event>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.ControlEvent.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ControlEvent {
    fn default() -> &'a ControlEvent {
        <ControlEvent as ::protobuf::Message>::default_instance()
    }
}

impl ControlEvent {
    pub fn new() -> ControlEvent {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ControlEvent {
    const NAME: &'static str = "ControlEvent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.event = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.event != ::protobuf::EnumOrUnknown::new(control_event::Event::TOGGLE_PLAYBACK_STATE) {
            my_size += ::protobuf::rt::int32_size(1, self.event.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.event != ::protobuf::EnumOrUnknown::new(control_event::Event::TOGGLE_PLAYBACK_STATE) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.event))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ControlEvent {
        ControlEvent::new()
    }

    fn clear(&mut self) {
        self.event = ::protobuf::EnumOrUnknown::new(control_event::Event::TOGGLE_PLAYBACK_STATE);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ControlEvent {
        static instance: ControlEvent = ControlEvent {
            event: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `ControlEvent`
pub mod control_event {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:fx.ipc.proto.ControlEvent.Event)
    pub enum Event {
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.ControlEvent.Event.TOGGLE_PLAYBACK_STATE)
        TOGGLE_PLAYBACK_STATE = 0,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.ControlEvent.Event.FORWARD)
        FORWARD = 1,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.ControlEvent.Event.REWIND)
        REWIND = 2,
    }

    impl ::protobuf::Enum for Event {
        const NAME: &'static str = "Event";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Event> {
            match value {
                0 => ::std::option::Option::Some(Event::TOGGLE_PLAYBACK_STATE),
                1 => ::std::option::Option::Some(Event::FORWARD),
                2 => ::std::option::Option::Some(Event::REWIND),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Event> {
            match str {
                "TOGGLE_PLAYBACK_STATE" => ::std::option::Option::Some(Event::TOGGLE_PLAYBACK_STATE),
                "FORWARD" => ::std::option::Option::Some(Event::FORWARD),
                "REWIND" => ::std::option::Option::Some(Event::REWIND),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Event] = &[
            Event::TOGGLE_PLAYBACK_STATE,
            Event::FORWARD,
            Event::REWIND,
        ];
    }

    impl ::std::default::Default for Event {
        fn default() -> Self {
            Event::TOGGLE_PLAYBACK_STATE
        }
    }

}
