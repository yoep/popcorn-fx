// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc 29.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `player.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:fx.ipc.proto.DiscoverPlayersRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DiscoverPlayersRequest {
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.DiscoverPlayersRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DiscoverPlayersRequest {
    fn default() -> &'a DiscoverPlayersRequest {
        <DiscoverPlayersRequest as ::protobuf::Message>::default_instance()
    }
}

impl DiscoverPlayersRequest {
    pub fn new() -> DiscoverPlayersRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for DiscoverPlayersRequest {
    const NAME: &'static str = "DiscoverPlayersRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DiscoverPlayersRequest {
        DiscoverPlayersRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DiscoverPlayersRequest {
        static instance: DiscoverPlayersRequest = DiscoverPlayersRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.StartPlayersDiscoveryRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StartPlayersDiscoveryRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.StartPlayersDiscoveryRequest.interval_seconds)
    pub interval_seconds: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.StartPlayersDiscoveryRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StartPlayersDiscoveryRequest {
    fn default() -> &'a StartPlayersDiscoveryRequest {
        <StartPlayersDiscoveryRequest as ::protobuf::Message>::default_instance()
    }
}

impl StartPlayersDiscoveryRequest {
    pub fn new() -> StartPlayersDiscoveryRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for StartPlayersDiscoveryRequest {
    const NAME: &'static str = "StartPlayersDiscoveryRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.interval_seconds = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.interval_seconds {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.interval_seconds {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StartPlayersDiscoveryRequest {
        StartPlayersDiscoveryRequest::new()
    }

    fn clear(&mut self) {
        self.interval_seconds = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StartPlayersDiscoveryRequest {
        static instance: StartPlayersDiscoveryRequest = StartPlayersDiscoveryRequest {
            interval_seconds: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.Player)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Player {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.Player.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:fx.ipc.proto.Player.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:fx.ipc.proto.Player.description)
    pub description: ::std::string::String,
    // @@protoc_insertion_point(field:fx.ipc.proto.Player.graphic_resource)
    pub graphic_resource: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:fx.ipc.proto.Player.state)
    pub state: ::protobuf::EnumOrUnknown<player::State>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.Player.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Player {
    fn default() -> &'a Player {
        <Player as ::protobuf::Message>::default_instance()
    }
}

impl Player {
    pub fn new() -> Player {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Player {
    const NAME: &'static str = "Player";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                26 => {
                    self.description = is.read_string()?;
                },
                34 => {
                    self.graphic_resource = is.read_bytes()?;
                },
                40 => {
                    self.state = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        if !self.graphic_resource.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.graphic_resource);
        }
        if self.state != ::protobuf::EnumOrUnknown::new(player::State::READY) {
            my_size += ::protobuf::rt::int32_size(5, self.state.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        if !self.graphic_resource.is_empty() {
            os.write_bytes(4, &self.graphic_resource)?;
        }
        if self.state != ::protobuf::EnumOrUnknown::new(player::State::READY) {
            os.write_enum(5, ::protobuf::EnumOrUnknown::value(&self.state))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Player {
        Player::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.description.clear();
        self.graphic_resource.clear();
        self.state = ::protobuf::EnumOrUnknown::new(player::State::READY);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Player {
        static instance: Player = Player {
            id: ::std::string::String::new(),
            name: ::std::string::String::new(),
            description: ::std::string::String::new(),
            graphic_resource: ::std::vec::Vec::new(),
            state: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `Player`
pub mod player {
    // @@protoc_insertion_point(message:fx.ipc.proto.Player.PlayRequest)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PlayRequest {
        // message fields
        // @@protoc_insertion_point(field:fx.ipc.proto.Player.PlayRequest.url)
        pub url: ::std::string::String,
        // @@protoc_insertion_point(field:fx.ipc.proto.Player.PlayRequest.title)
        pub title: ::std::string::String,
        // @@protoc_insertion_point(field:fx.ipc.proto.Player.PlayRequest.caption)
        pub caption: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:fx.ipc.proto.Player.PlayRequest.thumbnail)
        pub thumbnail: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:fx.ipc.proto.Player.PlayRequest.background)
        pub background: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:fx.ipc.proto.Player.PlayRequest.quality)
        pub quality: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:fx.ipc.proto.Player.PlayRequest.auto_resume_timestamp)
        pub auto_resume_timestamp: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:fx.ipc.proto.Player.PlayRequest.subtitle)
        pub subtitle: ::protobuf::MessageField<play_request::PlaySubtitleRequest>,
        // @@protoc_insertion_point(field:fx.ipc.proto.Player.PlayRequest.torrent)
        pub torrent: ::protobuf::MessageField<play_request::Torrent>,
        // special fields
        // @@protoc_insertion_point(special_field:fx.ipc.proto.Player.PlayRequest.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PlayRequest {
        fn default() -> &'a PlayRequest {
            <PlayRequest as ::protobuf::Message>::default_instance()
        }
    }

    impl PlayRequest {
        pub fn new() -> PlayRequest {
            ::std::default::Default::default()
        }
    }

    impl ::protobuf::Message for PlayRequest {
        const NAME: &'static str = "PlayRequest";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.url = is.read_string()?;
                    },
                    18 => {
                        self.title = is.read_string()?;
                    },
                    26 => {
                        self.caption = ::std::option::Option::Some(is.read_string()?);
                    },
                    34 => {
                        self.thumbnail = ::std::option::Option::Some(is.read_string()?);
                    },
                    42 => {
                        self.background = ::std::option::Option::Some(is.read_string()?);
                    },
                    50 => {
                        self.quality = ::std::option::Option::Some(is.read_string()?);
                    },
                    56 => {
                        self.auto_resume_timestamp = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    66 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.subtitle)?;
                    },
                    74 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.torrent)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.url.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.url);
            }
            if !self.title.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.title);
            }
            if let Some(v) = self.caption.as_ref() {
                my_size += ::protobuf::rt::string_size(3, &v);
            }
            if let Some(v) = self.thumbnail.as_ref() {
                my_size += ::protobuf::rt::string_size(4, &v);
            }
            if let Some(v) = self.background.as_ref() {
                my_size += ::protobuf::rt::string_size(5, &v);
            }
            if let Some(v) = self.quality.as_ref() {
                my_size += ::protobuf::rt::string_size(6, &v);
            }
            if let Some(v) = self.auto_resume_timestamp {
                my_size += ::protobuf::rt::uint64_size(7, v);
            }
            if let Some(v) = self.subtitle.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.torrent.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.url.is_empty() {
                os.write_string(1, &self.url)?;
            }
            if !self.title.is_empty() {
                os.write_string(2, &self.title)?;
            }
            if let Some(v) = self.caption.as_ref() {
                os.write_string(3, v)?;
            }
            if let Some(v) = self.thumbnail.as_ref() {
                os.write_string(4, v)?;
            }
            if let Some(v) = self.background.as_ref() {
                os.write_string(5, v)?;
            }
            if let Some(v) = self.quality.as_ref() {
                os.write_string(6, v)?;
            }
            if let Some(v) = self.auto_resume_timestamp {
                os.write_uint64(7, v)?;
            }
            if let Some(v) = self.subtitle.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
            }
            if let Some(v) = self.torrent.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PlayRequest {
            PlayRequest::new()
        }

        fn clear(&mut self) {
            self.url.clear();
            self.title.clear();
            self.caption = ::std::option::Option::None;
            self.thumbnail = ::std::option::Option::None;
            self.background = ::std::option::Option::None;
            self.quality = ::std::option::Option::None;
            self.auto_resume_timestamp = ::std::option::Option::None;
            self.subtitle.clear();
            self.torrent.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PlayRequest {
            static instance: PlayRequest = PlayRequest {
                url: ::std::string::String::new(),
                title: ::std::string::String::new(),
                caption: ::std::option::Option::None,
                thumbnail: ::std::option::Option::None,
                background: ::std::option::Option::None,
                quality: ::std::option::Option::None,
                auto_resume_timestamp: ::std::option::Option::None,
                subtitle: ::protobuf::MessageField::none(),
                torrent: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    /// Nested message and enums of message `PlayRequest`
    pub mod play_request {
        // @@protoc_insertion_point(message:fx.ipc.proto.Player.PlayRequest.Torrent)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct Torrent {
            // message fields
            // @@protoc_insertion_point(field:fx.ipc.proto.Player.PlayRequest.Torrent.handle)
            pub handle: ::protobuf::MessageField<super::super::super::message::Handle>,
            // special fields
            // @@protoc_insertion_point(special_field:fx.ipc.proto.Player.PlayRequest.Torrent.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a Torrent {
            fn default() -> &'a Torrent {
                <Torrent as ::protobuf::Message>::default_instance()
            }
        }

        impl Torrent {
            pub fn new() -> Torrent {
                ::std::default::Default::default()
            }
        }

        impl ::protobuf::Message for Torrent {
            const NAME: &'static str = "Torrent";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            ::protobuf::rt::read_singular_message_into_field(is, &mut self.handle)?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.handle.as_ref() {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let Some(v) = self.handle.as_ref() {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> Torrent {
                Torrent::new()
            }

            fn clear(&mut self) {
                self.handle.clear();
                self.special_fields.clear();
            }

            fn default_instance() -> &'static Torrent {
                static instance: Torrent = Torrent {
                    handle: ::protobuf::MessageField::none(),
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        // @@protoc_insertion_point(message:fx.ipc.proto.Player.PlayRequest.PlaySubtitleRequest)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct PlaySubtitleRequest {
            // message fields
            // @@protoc_insertion_point(field:fx.ipc.proto.Player.PlayRequest.PlaySubtitleRequest.enabled)
            pub enabled: bool,
            // @@protoc_insertion_point(field:fx.ipc.proto.Player.PlayRequest.PlaySubtitleRequest.info)
            pub info: ::protobuf::MessageField<super::super::super::subtitle::subtitle::Info>,
            // @@protoc_insertion_point(field:fx.ipc.proto.Player.PlayRequest.PlaySubtitleRequest.subtitle)
            pub subtitle: ::protobuf::MessageField<super::super::super::subtitle::Subtitle>,
            // special fields
            // @@protoc_insertion_point(special_field:fx.ipc.proto.Player.PlayRequest.PlaySubtitleRequest.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a PlaySubtitleRequest {
            fn default() -> &'a PlaySubtitleRequest {
                <PlaySubtitleRequest as ::protobuf::Message>::default_instance()
            }
        }

        impl PlaySubtitleRequest {
            pub fn new() -> PlaySubtitleRequest {
                ::std::default::Default::default()
            }
        }

        impl ::protobuf::Message for PlaySubtitleRequest {
            const NAME: &'static str = "PlaySubtitleRequest";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        8 => {
                            self.enabled = is.read_bool()?;
                        },
                        18 => {
                            ::protobuf::rt::read_singular_message_into_field(is, &mut self.info)?;
                        },
                        26 => {
                            ::protobuf::rt::read_singular_message_into_field(is, &mut self.subtitle)?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if self.enabled != false {
                    my_size += 1 + 1;
                }
                if let Some(v) = self.info.as_ref() {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                }
                if let Some(v) = self.subtitle.as_ref() {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if self.enabled != false {
                    os.write_bool(1, self.enabled)?;
                }
                if let Some(v) = self.info.as_ref() {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                }
                if let Some(v) = self.subtitle.as_ref() {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> PlaySubtitleRequest {
                PlaySubtitleRequest::new()
            }

            fn clear(&mut self) {
                self.enabled = false;
                self.info.clear();
                self.subtitle.clear();
                self.special_fields.clear();
            }

            fn default_instance() -> &'static PlaySubtitleRequest {
                static instance: PlaySubtitleRequest = PlaySubtitleRequest {
                    enabled: false,
                    info: ::protobuf::MessageField::none(),
                    subtitle: ::protobuf::MessageField::none(),
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:fx.ipc.proto.Player.State)
    pub enum State {
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Player.State.READY)
        READY = 0,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Player.State.LOADING)
        LOADING = 1,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Player.State.BUFFERING)
        BUFFERING = 2,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Player.State.PLAYING)
        PLAYING = 3,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Player.State.PAUSED)
        PAUSED = 4,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Player.State.STOPPED)
        STOPPED = 5,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Player.State.ERROR)
        ERROR = 6,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Player.State.UNKNOWN)
        UNKNOWN = -1,
    }

    impl ::protobuf::Enum for State {
        const NAME: &'static str = "State";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<State> {
            match value {
                0 => ::std::option::Option::Some(State::READY),
                1 => ::std::option::Option::Some(State::LOADING),
                2 => ::std::option::Option::Some(State::BUFFERING),
                3 => ::std::option::Option::Some(State::PLAYING),
                4 => ::std::option::Option::Some(State::PAUSED),
                5 => ::std::option::Option::Some(State::STOPPED),
                6 => ::std::option::Option::Some(State::ERROR),
                -1 => ::std::option::Option::Some(State::UNKNOWN),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<State> {
            match str {
                "READY" => ::std::option::Option::Some(State::READY),
                "LOADING" => ::std::option::Option::Some(State::LOADING),
                "BUFFERING" => ::std::option::Option::Some(State::BUFFERING),
                "PLAYING" => ::std::option::Option::Some(State::PLAYING),
                "PAUSED" => ::std::option::Option::Some(State::PAUSED),
                "STOPPED" => ::std::option::Option::Some(State::STOPPED),
                "ERROR" => ::std::option::Option::Some(State::ERROR),
                "UNKNOWN" => ::std::option::Option::Some(State::UNKNOWN),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [State] = &[
            State::READY,
            State::LOADING,
            State::BUFFERING,
            State::PLAYING,
            State::PAUSED,
            State::STOPPED,
            State::ERROR,
            State::UNKNOWN,
        ];
    }

    impl ::std::default::Default for State {
        fn default() -> Self {
            State::READY
        }
    }

}

// @@protoc_insertion_point(message:fx.ipc.proto.GetPlayerByIdRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPlayerByIdRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.GetPlayerByIdRequest.id)
    pub id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.GetPlayerByIdRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPlayerByIdRequest {
    fn default() -> &'a GetPlayerByIdRequest {
        <GetPlayerByIdRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPlayerByIdRequest {
    pub fn new() -> GetPlayerByIdRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetPlayerByIdRequest {
    const NAME: &'static str = "GetPlayerByIdRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPlayerByIdRequest {
        GetPlayerByIdRequest::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPlayerByIdRequest {
        static instance: GetPlayerByIdRequest = GetPlayerByIdRequest {
            id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.GetPlayerByIdResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPlayerByIdResponse {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.GetPlayerByIdResponse.player)
    pub player: ::protobuf::MessageField<Player>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.GetPlayerByIdResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPlayerByIdResponse {
    fn default() -> &'a GetPlayerByIdResponse {
        <GetPlayerByIdResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetPlayerByIdResponse {
    pub fn new() -> GetPlayerByIdResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetPlayerByIdResponse {
    const NAME: &'static str = "GetPlayerByIdResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.player)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.player.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.player.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPlayerByIdResponse {
        GetPlayerByIdResponse::new()
    }

    fn clear(&mut self) {
        self.player.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPlayerByIdResponse {
        static instance: GetPlayerByIdResponse = GetPlayerByIdResponse {
            player: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.GetPlayersRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPlayersRequest {
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.GetPlayersRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPlayersRequest {
    fn default() -> &'a GetPlayersRequest {
        <GetPlayersRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPlayersRequest {
    pub fn new() -> GetPlayersRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetPlayersRequest {
    const NAME: &'static str = "GetPlayersRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPlayersRequest {
        GetPlayersRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPlayersRequest {
        static instance: GetPlayersRequest = GetPlayersRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.GetPlayersResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPlayersResponse {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.GetPlayersResponse.players)
    pub players: ::std::vec::Vec<Player>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.GetPlayersResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPlayersResponse {
    fn default() -> &'a GetPlayersResponse {
        <GetPlayersResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetPlayersResponse {
    pub fn new() -> GetPlayersResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetPlayersResponse {
    const NAME: &'static str = "GetPlayersResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.players.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.players {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.players {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPlayersResponse {
        GetPlayersResponse::new()
    }

    fn clear(&mut self) {
        self.players.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPlayersResponse {
        static instance: GetPlayersResponse = GetPlayersResponse {
            players: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.GetActivePlayerRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetActivePlayerRequest {
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.GetActivePlayerRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetActivePlayerRequest {
    fn default() -> &'a GetActivePlayerRequest {
        <GetActivePlayerRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetActivePlayerRequest {
    pub fn new() -> GetActivePlayerRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetActivePlayerRequest {
    const NAME: &'static str = "GetActivePlayerRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetActivePlayerRequest {
        GetActivePlayerRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetActivePlayerRequest {
        static instance: GetActivePlayerRequest = GetActivePlayerRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.GetActivePlayerResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetActivePlayerResponse {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.GetActivePlayerResponse.player)
    pub player: ::protobuf::MessageField<Player>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.GetActivePlayerResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetActivePlayerResponse {
    fn default() -> &'a GetActivePlayerResponse {
        <GetActivePlayerResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetActivePlayerResponse {
    pub fn new() -> GetActivePlayerResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetActivePlayerResponse {
    const NAME: &'static str = "GetActivePlayerResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.player)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.player.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.player.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetActivePlayerResponse {
        GetActivePlayerResponse::new()
    }

    fn clear(&mut self) {
        self.player.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetActivePlayerResponse {
        static instance: GetActivePlayerResponse = GetActivePlayerResponse {
            player: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.UpdateActivePlayerRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UpdateActivePlayerRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.UpdateActivePlayerRequest.player)
    pub player: ::protobuf::MessageField<Player>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.UpdateActivePlayerRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpdateActivePlayerRequest {
    fn default() -> &'a UpdateActivePlayerRequest {
        <UpdateActivePlayerRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateActivePlayerRequest {
    pub fn new() -> UpdateActivePlayerRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for UpdateActivePlayerRequest {
    const NAME: &'static str = "UpdateActivePlayerRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.player)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.player.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.player.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpdateActivePlayerRequest {
        UpdateActivePlayerRequest::new()
    }

    fn clear(&mut self) {
        self.player.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpdateActivePlayerRequest {
        static instance: UpdateActivePlayerRequest = UpdateActivePlayerRequest {
            player: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.RegisterPlayerRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RegisterPlayerRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.RegisterPlayerRequest.player)
    pub player: ::protobuf::MessageField<Player>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.RegisterPlayerRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RegisterPlayerRequest {
    fn default() -> &'a RegisterPlayerRequest {
        <RegisterPlayerRequest as ::protobuf::Message>::default_instance()
    }
}

impl RegisterPlayerRequest {
    pub fn new() -> RegisterPlayerRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for RegisterPlayerRequest {
    const NAME: &'static str = "RegisterPlayerRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.player)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.player.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.player.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RegisterPlayerRequest {
        RegisterPlayerRequest::new()
    }

    fn clear(&mut self) {
        self.player.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RegisterPlayerRequest {
        static instance: RegisterPlayerRequest = RegisterPlayerRequest {
            player: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.RegisterPlayerResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RegisterPlayerResponse {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.RegisterPlayerResponse.result)
    pub result: ::protobuf::EnumOrUnknown<super::message::response::Result>,
    // @@protoc_insertion_point(field:fx.ipc.proto.RegisterPlayerResponse.error)
    pub error: ::protobuf::EnumOrUnknown<register_player_response::Error>,
    // @@protoc_insertion_point(field:fx.ipc.proto.RegisterPlayerResponse.duplicate_player)
    pub duplicate_player: ::protobuf::MessageField<register_player_response::DuplicatePlayer>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.RegisterPlayerResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RegisterPlayerResponse {
    fn default() -> &'a RegisterPlayerResponse {
        <RegisterPlayerResponse as ::protobuf::Message>::default_instance()
    }
}

impl RegisterPlayerResponse {
    pub fn new() -> RegisterPlayerResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for RegisterPlayerResponse {
    const NAME: &'static str = "RegisterPlayerResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.error = is.read_enum_or_unknown()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.duplicate_player)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.result != ::protobuf::EnumOrUnknown::new(super::message::response::Result::OK) {
            my_size += ::protobuf::rt::int32_size(1, self.result.value());
        }
        if self.error != ::protobuf::EnumOrUnknown::new(register_player_response::Error::DUPLICATE_PLAYER) {
            my_size += ::protobuf::rt::int32_size(2, self.error.value());
        }
        if let Some(v) = self.duplicate_player.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.result != ::protobuf::EnumOrUnknown::new(super::message::response::Result::OK) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.result))?;
        }
        if self.error != ::protobuf::EnumOrUnknown::new(register_player_response::Error::DUPLICATE_PLAYER) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.error))?;
        }
        if let Some(v) = self.duplicate_player.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RegisterPlayerResponse {
        RegisterPlayerResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::protobuf::EnumOrUnknown::new(super::message::response::Result::OK);
        self.error = ::protobuf::EnumOrUnknown::new(register_player_response::Error::DUPLICATE_PLAYER);
        self.duplicate_player.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RegisterPlayerResponse {
        static instance: RegisterPlayerResponse = RegisterPlayerResponse {
            result: ::protobuf::EnumOrUnknown::from_i32(0),
            error: ::protobuf::EnumOrUnknown::from_i32(0),
            duplicate_player: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `RegisterPlayerResponse`
pub mod register_player_response {
    // @@protoc_insertion_point(message:fx.ipc.proto.RegisterPlayerResponse.DuplicatePlayer)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct DuplicatePlayer {
        // message fields
        // @@protoc_insertion_point(field:fx.ipc.proto.RegisterPlayerResponse.DuplicatePlayer.id)
        pub id: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:fx.ipc.proto.RegisterPlayerResponse.DuplicatePlayer.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a DuplicatePlayer {
        fn default() -> &'a DuplicatePlayer {
            <DuplicatePlayer as ::protobuf::Message>::default_instance()
        }
    }

    impl DuplicatePlayer {
        pub fn new() -> DuplicatePlayer {
            ::std::default::Default::default()
        }
    }

    impl ::protobuf::Message for DuplicatePlayer {
        const NAME: &'static str = "DuplicatePlayer";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.id = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.id.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.id);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.id.is_empty() {
                os.write_string(1, &self.id)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> DuplicatePlayer {
            DuplicatePlayer::new()
        }

        fn clear(&mut self) {
            self.id.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static DuplicatePlayer {
            static instance: DuplicatePlayer = DuplicatePlayer {
                id: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:fx.ipc.proto.RegisterPlayerResponse.Error)
    pub enum Error {
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.RegisterPlayerResponse.Error.DUPLICATE_PLAYER)
        DUPLICATE_PLAYER = 0,
    }

    impl ::protobuf::Enum for Error {
        const NAME: &'static str = "Error";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Error> {
            match value {
                0 => ::std::option::Option::Some(Error::DUPLICATE_PLAYER),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Error> {
            match str {
                "DUPLICATE_PLAYER" => ::std::option::Option::Some(Error::DUPLICATE_PLAYER),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Error] = &[
            Error::DUPLICATE_PLAYER,
        ];
    }

    impl ::std::default::Default for Error {
        fn default() -> Self {
            Error::DUPLICATE_PLAYER
        }
    }

}

// @@protoc_insertion_point(message:fx.ipc.proto.RemovePlayerRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RemovePlayerRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.RemovePlayerRequest.player)
    pub player: ::protobuf::MessageField<Player>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.RemovePlayerRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RemovePlayerRequest {
    fn default() -> &'a RemovePlayerRequest {
        <RemovePlayerRequest as ::protobuf::Message>::default_instance()
    }
}

impl RemovePlayerRequest {
    pub fn new() -> RemovePlayerRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for RemovePlayerRequest {
    const NAME: &'static str = "RemovePlayerRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.player)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.player.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.player.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RemovePlayerRequest {
        RemovePlayerRequest::new()
    }

    fn clear(&mut self) {
        self.player.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RemovePlayerRequest {
        static instance: RemovePlayerRequest = RemovePlayerRequest {
            player: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.GetPlayerStateRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPlayerStateRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.GetPlayerStateRequest.player_id)
    pub player_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.GetPlayerStateRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPlayerStateRequest {
    fn default() -> &'a GetPlayerStateRequest {
        <GetPlayerStateRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPlayerStateRequest {
    pub fn new() -> GetPlayerStateRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetPlayerStateRequest {
    const NAME: &'static str = "GetPlayerStateRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.player_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.player_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.player_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.player_id.is_empty() {
            os.write_string(1, &self.player_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPlayerStateRequest {
        GetPlayerStateRequest::new()
    }

    fn clear(&mut self) {
        self.player_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPlayerStateRequest {
        static instance: GetPlayerStateRequest = GetPlayerStateRequest {
            player_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.GetPlayerStateResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPlayerStateResponse {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.GetPlayerStateResponse.state)
    pub state: ::protobuf::EnumOrUnknown<player::State>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.GetPlayerStateResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPlayerStateResponse {
    fn default() -> &'a GetPlayerStateResponse {
        <GetPlayerStateResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetPlayerStateResponse {
    pub fn new() -> GetPlayerStateResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetPlayerStateResponse {
    const NAME: &'static str = "GetPlayerStateResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.state = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.state != ::protobuf::EnumOrUnknown::new(player::State::READY) {
            my_size += ::protobuf::rt::int32_size(1, self.state.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.state != ::protobuf::EnumOrUnknown::new(player::State::READY) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.state))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPlayerStateResponse {
        GetPlayerStateResponse::new()
    }

    fn clear(&mut self) {
        self.state = ::protobuf::EnumOrUnknown::new(player::State::READY);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPlayerStateResponse {
        static instance: GetPlayerStateResponse = GetPlayerStateResponse {
            state: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.GetPlayerVolumeRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPlayerVolumeRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.GetPlayerVolumeRequest.player_id)
    pub player_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.GetPlayerVolumeRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPlayerVolumeRequest {
    fn default() -> &'a GetPlayerVolumeRequest {
        <GetPlayerVolumeRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPlayerVolumeRequest {
    pub fn new() -> GetPlayerVolumeRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetPlayerVolumeRequest {
    const NAME: &'static str = "GetPlayerVolumeRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.player_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.player_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.player_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.player_id.is_empty() {
            os.write_string(1, &self.player_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPlayerVolumeRequest {
        GetPlayerVolumeRequest::new()
    }

    fn clear(&mut self) {
        self.player_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPlayerVolumeRequest {
        static instance: GetPlayerVolumeRequest = GetPlayerVolumeRequest {
            player_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.GetPlayerVolumeResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPlayerVolumeResponse {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.GetPlayerVolumeResponse.volume)
    pub volume: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.GetPlayerVolumeResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPlayerVolumeResponse {
    fn default() -> &'a GetPlayerVolumeResponse {
        <GetPlayerVolumeResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetPlayerVolumeResponse {
    pub fn new() -> GetPlayerVolumeResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetPlayerVolumeResponse {
    const NAME: &'static str = "GetPlayerVolumeResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.volume = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.volume {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.volume {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPlayerVolumeResponse {
        GetPlayerVolumeResponse::new()
    }

    fn clear(&mut self) {
        self.volume = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPlayerVolumeResponse {
        static instance: GetPlayerVolumeResponse = GetPlayerVolumeResponse {
            volume: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.PlayerPlayRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlayerPlayRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.PlayerPlayRequest.player_id)
    pub player_id: ::std::string::String,
    // @@protoc_insertion_point(field:fx.ipc.proto.PlayerPlayRequest.request)
    pub request: ::protobuf::MessageField<player::PlayRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.PlayerPlayRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlayerPlayRequest {
    fn default() -> &'a PlayerPlayRequest {
        <PlayerPlayRequest as ::protobuf::Message>::default_instance()
    }
}

impl PlayerPlayRequest {
    pub fn new() -> PlayerPlayRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for PlayerPlayRequest {
    const NAME: &'static str = "PlayerPlayRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.player_id = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.request)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.player_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.player_id);
        }
        if let Some(v) = self.request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.player_id.is_empty() {
            os.write_string(1, &self.player_id)?;
        }
        if let Some(v) = self.request.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlayerPlayRequest {
        PlayerPlayRequest::new()
    }

    fn clear(&mut self) {
        self.player_id.clear();
        self.request.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlayerPlayRequest {
        static instance: PlayerPlayRequest = PlayerPlayRequest {
            player_id: ::std::string::String::new(),
            request: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.PlayerPauseRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlayerPauseRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.PlayerPauseRequest.player_id)
    pub player_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.PlayerPauseRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlayerPauseRequest {
    fn default() -> &'a PlayerPauseRequest {
        <PlayerPauseRequest as ::protobuf::Message>::default_instance()
    }
}

impl PlayerPauseRequest {
    pub fn new() -> PlayerPauseRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for PlayerPauseRequest {
    const NAME: &'static str = "PlayerPauseRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.player_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.player_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.player_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.player_id.is_empty() {
            os.write_string(1, &self.player_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlayerPauseRequest {
        PlayerPauseRequest::new()
    }

    fn clear(&mut self) {
        self.player_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlayerPauseRequest {
        static instance: PlayerPauseRequest = PlayerPauseRequest {
            player_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.PlayerResumeRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlayerResumeRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.PlayerResumeRequest.player_id)
    pub player_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.PlayerResumeRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlayerResumeRequest {
    fn default() -> &'a PlayerResumeRequest {
        <PlayerResumeRequest as ::protobuf::Message>::default_instance()
    }
}

impl PlayerResumeRequest {
    pub fn new() -> PlayerResumeRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for PlayerResumeRequest {
    const NAME: &'static str = "PlayerResumeRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.player_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.player_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.player_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.player_id.is_empty() {
            os.write_string(1, &self.player_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlayerResumeRequest {
        PlayerResumeRequest::new()
    }

    fn clear(&mut self) {
        self.player_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlayerResumeRequest {
        static instance: PlayerResumeRequest = PlayerResumeRequest {
            player_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.PlayerSeekRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlayerSeekRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.PlayerSeekRequest.player_id)
    pub player_id: ::std::string::String,
    // @@protoc_insertion_point(field:fx.ipc.proto.PlayerSeekRequest.time)
    pub time: u64,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.PlayerSeekRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlayerSeekRequest {
    fn default() -> &'a PlayerSeekRequest {
        <PlayerSeekRequest as ::protobuf::Message>::default_instance()
    }
}

impl PlayerSeekRequest {
    pub fn new() -> PlayerSeekRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for PlayerSeekRequest {
    const NAME: &'static str = "PlayerSeekRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.player_id = is.read_string()?;
                },
                16 => {
                    self.time = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.player_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.player_id);
        }
        if self.time != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.time);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.player_id.is_empty() {
            os.write_string(1, &self.player_id)?;
        }
        if self.time != 0 {
            os.write_uint64(2, self.time)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlayerSeekRequest {
        PlayerSeekRequest::new()
    }

    fn clear(&mut self) {
        self.player_id.clear();
        self.time = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlayerSeekRequest {
        static instance: PlayerSeekRequest = PlayerSeekRequest {
            player_id: ::std::string::String::new(),
            time: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.PlayerStopRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlayerStopRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.PlayerStopRequest.player_id)
    pub player_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.PlayerStopRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlayerStopRequest {
    fn default() -> &'a PlayerStopRequest {
        <PlayerStopRequest as ::protobuf::Message>::default_instance()
    }
}

impl PlayerStopRequest {
    pub fn new() -> PlayerStopRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for PlayerStopRequest {
    const NAME: &'static str = "PlayerStopRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.player_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.player_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.player_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.player_id.is_empty() {
            os.write_string(1, &self.player_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlayerStopRequest {
        PlayerStopRequest::new()
    }

    fn clear(&mut self) {
        self.player_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlayerStopRequest {
        static instance: PlayerStopRequest = PlayerStopRequest {
            player_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.PlayerManagerEvent)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlayerManagerEvent {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.PlayerManagerEvent.event)
    pub event: ::protobuf::EnumOrUnknown<player_manager_event::Event>,
    // @@protoc_insertion_point(field:fx.ipc.proto.PlayerManagerEvent.active_player_changed)
    pub active_player_changed: ::protobuf::MessageField<player_manager_event::ActivePlayerChanged>,
    // @@protoc_insertion_point(field:fx.ipc.proto.PlayerManagerEvent.player_playback_changed)
    pub player_playback_changed: ::protobuf::MessageField<player_manager_event::PlayerPlaybackChanged>,
    // @@protoc_insertion_point(field:fx.ipc.proto.PlayerManagerEvent.player_duration_changed)
    pub player_duration_changed: ::protobuf::MessageField<player_manager_event::PlayerDurationChanged>,
    // @@protoc_insertion_point(field:fx.ipc.proto.PlayerManagerEvent.player_time_changed)
    pub player_time_changed: ::protobuf::MessageField<player_manager_event::PlayerTimeChanged>,
    // @@protoc_insertion_point(field:fx.ipc.proto.PlayerManagerEvent.player_state_changed)
    pub player_state_changed: ::protobuf::MessageField<player_manager_event::PlayerStateChanged>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.PlayerManagerEvent.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlayerManagerEvent {
    fn default() -> &'a PlayerManagerEvent {
        <PlayerManagerEvent as ::protobuf::Message>::default_instance()
    }
}

impl PlayerManagerEvent {
    pub fn new() -> PlayerManagerEvent {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for PlayerManagerEvent {
    const NAME: &'static str = "PlayerManagerEvent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.event = is.read_enum_or_unknown()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.active_player_changed)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.player_playback_changed)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.player_duration_changed)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.player_time_changed)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.player_state_changed)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.event != ::protobuf::EnumOrUnknown::new(player_manager_event::Event::ACTIVE_PLAYER_CHANGED) {
            my_size += ::protobuf::rt::int32_size(1, self.event.value());
        }
        if let Some(v) = self.active_player_changed.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.player_playback_changed.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.player_duration_changed.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.player_time_changed.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.player_state_changed.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.event != ::protobuf::EnumOrUnknown::new(player_manager_event::Event::ACTIVE_PLAYER_CHANGED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.event))?;
        }
        if let Some(v) = self.active_player_changed.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.player_playback_changed.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.player_duration_changed.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.player_time_changed.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.player_state_changed.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlayerManagerEvent {
        PlayerManagerEvent::new()
    }

    fn clear(&mut self) {
        self.event = ::protobuf::EnumOrUnknown::new(player_manager_event::Event::ACTIVE_PLAYER_CHANGED);
        self.active_player_changed.clear();
        self.player_playback_changed.clear();
        self.player_duration_changed.clear();
        self.player_time_changed.clear();
        self.player_state_changed.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlayerManagerEvent {
        static instance: PlayerManagerEvent = PlayerManagerEvent {
            event: ::protobuf::EnumOrUnknown::from_i32(0),
            active_player_changed: ::protobuf::MessageField::none(),
            player_playback_changed: ::protobuf::MessageField::none(),
            player_duration_changed: ::protobuf::MessageField::none(),
            player_time_changed: ::protobuf::MessageField::none(),
            player_state_changed: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `PlayerManagerEvent`
pub mod player_manager_event {
    // @@protoc_insertion_point(message:fx.ipc.proto.PlayerManagerEvent.ActivePlayerChanged)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ActivePlayerChanged {
        // message fields
        // @@protoc_insertion_point(field:fx.ipc.proto.PlayerManagerEvent.ActivePlayerChanged.old_player_id)
        pub old_player_id: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:fx.ipc.proto.PlayerManagerEvent.ActivePlayerChanged.new_player_id)
        pub new_player_id: ::std::string::String,
        // @@protoc_insertion_point(field:fx.ipc.proto.PlayerManagerEvent.ActivePlayerChanged.new_player_name)
        pub new_player_name: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:fx.ipc.proto.PlayerManagerEvent.ActivePlayerChanged.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ActivePlayerChanged {
        fn default() -> &'a ActivePlayerChanged {
            <ActivePlayerChanged as ::protobuf::Message>::default_instance()
        }
    }

    impl ActivePlayerChanged {
        pub fn new() -> ActivePlayerChanged {
            ::std::default::Default::default()
        }
    }

    impl ::protobuf::Message for ActivePlayerChanged {
        const NAME: &'static str = "ActivePlayerChanged";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.old_player_id = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.new_player_id = is.read_string()?;
                    },
                    26 => {
                        self.new_player_name = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.old_player_id.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if !self.new_player_id.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.new_player_id);
            }
            if !self.new_player_name.is_empty() {
                my_size += ::protobuf::rt::string_size(3, &self.new_player_name);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.old_player_id.as_ref() {
                os.write_string(1, v)?;
            }
            if !self.new_player_id.is_empty() {
                os.write_string(2, &self.new_player_id)?;
            }
            if !self.new_player_name.is_empty() {
                os.write_string(3, &self.new_player_name)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ActivePlayerChanged {
            ActivePlayerChanged::new()
        }

        fn clear(&mut self) {
            self.old_player_id = ::std::option::Option::None;
            self.new_player_id.clear();
            self.new_player_name.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ActivePlayerChanged {
            static instance: ActivePlayerChanged = ActivePlayerChanged {
                old_player_id: ::std::option::Option::None,
                new_player_id: ::std::string::String::new(),
                new_player_name: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:fx.ipc.proto.PlayerManagerEvent.PlayerPlaybackChanged)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PlayerPlaybackChanged {
        // message fields
        // @@protoc_insertion_point(field:fx.ipc.proto.PlayerManagerEvent.PlayerPlaybackChanged.request)
        pub request: ::protobuf::MessageField<super::player::PlayRequest>,
        // special fields
        // @@protoc_insertion_point(special_field:fx.ipc.proto.PlayerManagerEvent.PlayerPlaybackChanged.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PlayerPlaybackChanged {
        fn default() -> &'a PlayerPlaybackChanged {
            <PlayerPlaybackChanged as ::protobuf::Message>::default_instance()
        }
    }

    impl PlayerPlaybackChanged {
        pub fn new() -> PlayerPlaybackChanged {
            ::std::default::Default::default()
        }
    }

    impl ::protobuf::Message for PlayerPlaybackChanged {
        const NAME: &'static str = "PlayerPlaybackChanged";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.request)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.request.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.request.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PlayerPlaybackChanged {
            PlayerPlaybackChanged::new()
        }

        fn clear(&mut self) {
            self.request.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PlayerPlaybackChanged {
            static instance: PlayerPlaybackChanged = PlayerPlaybackChanged {
                request: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:fx.ipc.proto.PlayerManagerEvent.PlayerDurationChanged)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PlayerDurationChanged {
        // message fields
        // @@protoc_insertion_point(field:fx.ipc.proto.PlayerManagerEvent.PlayerDurationChanged.duration)
        pub duration: u64,
        // special fields
        // @@protoc_insertion_point(special_field:fx.ipc.proto.PlayerManagerEvent.PlayerDurationChanged.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PlayerDurationChanged {
        fn default() -> &'a PlayerDurationChanged {
            <PlayerDurationChanged as ::protobuf::Message>::default_instance()
        }
    }

    impl PlayerDurationChanged {
        pub fn new() -> PlayerDurationChanged {
            ::std::default::Default::default()
        }
    }

    impl ::protobuf::Message for PlayerDurationChanged {
        const NAME: &'static str = "PlayerDurationChanged";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.duration = is.read_uint64()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.duration != 0 {
                my_size += ::protobuf::rt::uint64_size(1, self.duration);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.duration != 0 {
                os.write_uint64(1, self.duration)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PlayerDurationChanged {
            PlayerDurationChanged::new()
        }

        fn clear(&mut self) {
            self.duration = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PlayerDurationChanged {
            static instance: PlayerDurationChanged = PlayerDurationChanged {
                duration: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:fx.ipc.proto.PlayerManagerEvent.PlayerTimeChanged)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PlayerTimeChanged {
        // message fields
        // @@protoc_insertion_point(field:fx.ipc.proto.PlayerManagerEvent.PlayerTimeChanged.time)
        pub time: u64,
        // special fields
        // @@protoc_insertion_point(special_field:fx.ipc.proto.PlayerManagerEvent.PlayerTimeChanged.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PlayerTimeChanged {
        fn default() -> &'a PlayerTimeChanged {
            <PlayerTimeChanged as ::protobuf::Message>::default_instance()
        }
    }

    impl PlayerTimeChanged {
        pub fn new() -> PlayerTimeChanged {
            ::std::default::Default::default()
        }
    }

    impl ::protobuf::Message for PlayerTimeChanged {
        const NAME: &'static str = "PlayerTimeChanged";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.time = is.read_uint64()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.time != 0 {
                my_size += ::protobuf::rt::uint64_size(1, self.time);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.time != 0 {
                os.write_uint64(1, self.time)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PlayerTimeChanged {
            PlayerTimeChanged::new()
        }

        fn clear(&mut self) {
            self.time = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PlayerTimeChanged {
            static instance: PlayerTimeChanged = PlayerTimeChanged {
                time: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:fx.ipc.proto.PlayerManagerEvent.PlayerStateChanged)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PlayerStateChanged {
        // message fields
        // @@protoc_insertion_point(field:fx.ipc.proto.PlayerManagerEvent.PlayerStateChanged.state)
        pub state: ::protobuf::EnumOrUnknown<super::player::State>,
        // special fields
        // @@protoc_insertion_point(special_field:fx.ipc.proto.PlayerManagerEvent.PlayerStateChanged.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PlayerStateChanged {
        fn default() -> &'a PlayerStateChanged {
            <PlayerStateChanged as ::protobuf::Message>::default_instance()
        }
    }

    impl PlayerStateChanged {
        pub fn new() -> PlayerStateChanged {
            ::std::default::Default::default()
        }
    }

    impl ::protobuf::Message for PlayerStateChanged {
        const NAME: &'static str = "PlayerStateChanged";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.state = is.read_enum_or_unknown()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.state != ::protobuf::EnumOrUnknown::new(super::player::State::READY) {
                my_size += ::protobuf::rt::int32_size(1, self.state.value());
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.state != ::protobuf::EnumOrUnknown::new(super::player::State::READY) {
                os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.state))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PlayerStateChanged {
            PlayerStateChanged::new()
        }

        fn clear(&mut self) {
            self.state = ::protobuf::EnumOrUnknown::new(super::player::State::READY);
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PlayerStateChanged {
            static instance: PlayerStateChanged = PlayerStateChanged {
                state: ::protobuf::EnumOrUnknown::from_i32(0),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:fx.ipc.proto.PlayerManagerEvent.Event)
    pub enum Event {
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.PlayerManagerEvent.Event.ACTIVE_PLAYER_CHANGED)
        ACTIVE_PLAYER_CHANGED = 0,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.PlayerManagerEvent.Event.PLAYERS_CHANGED)
        PLAYERS_CHANGED = 1,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.PlayerManagerEvent.Event.PLAYER_PLAYBACK_CHANGED)
        PLAYER_PLAYBACK_CHANGED = 2,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.PlayerManagerEvent.Event.PLAYER_DURATION_CHANGED)
        PLAYER_DURATION_CHANGED = 3,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.PlayerManagerEvent.Event.PLAYER_TIMED_CHANGED)
        PLAYER_TIMED_CHANGED = 4,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.PlayerManagerEvent.Event.PLAYER_STATE_CHANGED)
        PLAYER_STATE_CHANGED = 5,
    }

    impl ::protobuf::Enum for Event {
        const NAME: &'static str = "Event";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Event> {
            match value {
                0 => ::std::option::Option::Some(Event::ACTIVE_PLAYER_CHANGED),
                1 => ::std::option::Option::Some(Event::PLAYERS_CHANGED),
                2 => ::std::option::Option::Some(Event::PLAYER_PLAYBACK_CHANGED),
                3 => ::std::option::Option::Some(Event::PLAYER_DURATION_CHANGED),
                4 => ::std::option::Option::Some(Event::PLAYER_TIMED_CHANGED),
                5 => ::std::option::Option::Some(Event::PLAYER_STATE_CHANGED),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Event> {
            match str {
                "ACTIVE_PLAYER_CHANGED" => ::std::option::Option::Some(Event::ACTIVE_PLAYER_CHANGED),
                "PLAYERS_CHANGED" => ::std::option::Option::Some(Event::PLAYERS_CHANGED),
                "PLAYER_PLAYBACK_CHANGED" => ::std::option::Option::Some(Event::PLAYER_PLAYBACK_CHANGED),
                "PLAYER_DURATION_CHANGED" => ::std::option::Option::Some(Event::PLAYER_DURATION_CHANGED),
                "PLAYER_TIMED_CHANGED" => ::std::option::Option::Some(Event::PLAYER_TIMED_CHANGED),
                "PLAYER_STATE_CHANGED" => ::std::option::Option::Some(Event::PLAYER_STATE_CHANGED),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Event] = &[
            Event::ACTIVE_PLAYER_CHANGED,
            Event::PLAYERS_CHANGED,
            Event::PLAYER_PLAYBACK_CHANGED,
            Event::PLAYER_DURATION_CHANGED,
            Event::PLAYER_TIMED_CHANGED,
            Event::PLAYER_STATE_CHANGED,
        ];
    }

    impl ::std::default::Default for Event {
        fn default() -> Self {
            Event::ACTIVE_PLAYER_CHANGED
        }
    }

}
