// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc 29.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `loader.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:fx.ipc.proto.LoaderLoadRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LoaderLoadRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.LoaderLoadRequest.url)
    pub url: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.LoaderLoadRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LoaderLoadRequest {
    fn default() -> &'a LoaderLoadRequest {
        <LoaderLoadRequest as ::protobuf::Message>::default_instance()
    }
}

impl LoaderLoadRequest {
    pub fn new() -> LoaderLoadRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for LoaderLoadRequest {
    const NAME: &'static str = "LoaderLoadRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.url = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.url.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.url);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.url.is_empty() {
            os.write_string(1, &self.url)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LoaderLoadRequest {
        LoaderLoadRequest::new()
    }

    fn clear(&mut self) {
        self.url.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LoaderLoadRequest {
        static instance: LoaderLoadRequest = LoaderLoadRequest {
            url: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.LoaderLoadResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LoaderLoadResponse {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.LoaderLoadResponse.handle)
    pub handle: i64,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.LoaderLoadResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LoaderLoadResponse {
    fn default() -> &'a LoaderLoadResponse {
        <LoaderLoadResponse as ::protobuf::Message>::default_instance()
    }
}

impl LoaderLoadResponse {
    pub fn new() -> LoaderLoadResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for LoaderLoadResponse {
    const NAME: &'static str = "LoaderLoadResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.handle = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.handle != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.handle);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.handle != 0 {
            os.write_int64(1, self.handle)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LoaderLoadResponse {
        LoaderLoadResponse::new()
    }

    fn clear(&mut self) {
        self.handle = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LoaderLoadResponse {
        static instance: LoaderLoadResponse = LoaderLoadResponse {
            handle: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.LoaderCancelRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LoaderCancelRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.LoaderCancelRequest.handle)
    pub handle: i64,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.LoaderCancelRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LoaderCancelRequest {
    fn default() -> &'a LoaderCancelRequest {
        <LoaderCancelRequest as ::protobuf::Message>::default_instance()
    }
}

impl LoaderCancelRequest {
    pub fn new() -> LoaderCancelRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for LoaderCancelRequest {
    const NAME: &'static str = "LoaderCancelRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.handle = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.handle != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.handle);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.handle != 0 {
            os.write_int64(1, self.handle)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LoaderCancelRequest {
        LoaderCancelRequest::new()
    }

    fn clear(&mut self) {
        self.handle = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LoaderCancelRequest {
        static instance: LoaderCancelRequest = LoaderCancelRequest {
            handle: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}
