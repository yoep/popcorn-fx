// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc 29.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `message.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:fx.ipc.proto.FxMessage)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FxMessage {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.FxMessage.type)
    pub type_: ::std::string::String,
    // @@protoc_insertion_point(field:fx.ipc.proto.FxMessage.sequence_id)
    pub sequence_id: u32,
    // @@protoc_insertion_point(field:fx.ipc.proto.FxMessage.reply_to)
    pub reply_to: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:fx.ipc.proto.FxMessage.payload)
    pub payload: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.FxMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FxMessage {
    fn default() -> &'a FxMessage {
        <FxMessage as ::protobuf::Message>::default_instance()
    }
}

impl FxMessage {
    pub fn new() -> FxMessage {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for FxMessage {
    const NAME: &'static str = "FxMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = is.read_string()?;
                },
                16 => {
                    self.sequence_id = is.read_uint32()?;
                },
                24 => {
                    self.reply_to = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    self.payload = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.type_.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.type_);
        }
        if self.sequence_id != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.sequence_id);
        }
        if let Some(v) = self.reply_to {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.type_.is_empty() {
            os.write_string(1, &self.type_)?;
        }
        if self.sequence_id != 0 {
            os.write_uint32(2, self.sequence_id)?;
        }
        if let Some(v) = self.reply_to {
            os.write_uint32(3, v)?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(4, &self.payload)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FxMessage {
        FxMessage::new()
    }

    fn clear(&mut self) {
        self.type_.clear();
        self.sequence_id = 0;
        self.reply_to = ::std::option::Option::None;
        self.payload.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FxMessage {
        static instance: FxMessage = FxMessage {
            type_: ::std::string::String::new(),
            sequence_id: 0,
            reply_to: ::std::option::Option::None,
            payload: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Response {
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Response {
    const NAME: &'static str = "Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Response {
        Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Response {
        static instance: Response = Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `Response`
pub mod response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:fx.ipc.proto.Response.Result)
    pub enum Result {
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Response.Result.OK)
        OK = 0,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Response.Result.ERROR)
        ERROR = 1,
    }

    impl ::protobuf::Enum for Result {
        const NAME: &'static str = "Result";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Result> {
            match value {
                0 => ::std::option::Option::Some(Result::OK),
                1 => ::std::option::Option::Some(Result::ERROR),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Result> {
            match str {
                "OK" => ::std::option::Option::Some(Result::OK),
                "ERROR" => ::std::option::Option::Some(Result::ERROR),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Result] = &[
            Result::OK,
            Result::ERROR,
        ];
    }

    impl ::std::default::Default for Result {
        fn default() -> Self {
            Result::OK
        }
    }

}

// @@protoc_insertion_point(message:fx.ipc.proto.Handle)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Handle {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.Handle.handle)
    pub handle: i64,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.Handle.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Handle {
    fn default() -> &'a Handle {
        <Handle as ::protobuf::Message>::default_instance()
    }
}

impl Handle {
    pub fn new() -> Handle {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Handle {
    const NAME: &'static str = "Handle";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.handle = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.handle != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.handle);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.handle != 0 {
            os.write_int64(1, self.handle)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Handle {
        Handle::new()
    }

    fn clear(&mut self) {
        self.handle = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Handle {
        static instance: Handle = Handle {
            handle: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}
