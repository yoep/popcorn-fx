// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc 29.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `update.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:fx.ipc.proto.Update)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Update {
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.Update.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Update {
    fn default() -> &'a Update {
        <Update as ::protobuf::Message>::default_instance()
    }
}

impl Update {
    pub fn new() -> Update {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Update {
    const NAME: &'static str = "Update";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Update {
        Update::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Update {
        static instance: Update = Update {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `Update`
pub mod update {
    // @@protoc_insertion_point(message:fx.ipc.proto.Update.VersionInfo)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct VersionInfo {
        // message fields
        // @@protoc_insertion_point(field:fx.ipc.proto.Update.VersionInfo.application)
        pub application: ::protobuf::MessageField<PatchInfo>,
        // @@protoc_insertion_point(field:fx.ipc.proto.Update.VersionInfo.runtime)
        pub runtime: ::protobuf::MessageField<PatchInfo>,
        // special fields
        // @@protoc_insertion_point(special_field:fx.ipc.proto.Update.VersionInfo.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a VersionInfo {
        fn default() -> &'a VersionInfo {
            <VersionInfo as ::protobuf::Message>::default_instance()
        }
    }

    impl VersionInfo {
        pub fn new() -> VersionInfo {
            ::std::default::Default::default()
        }
    }

    impl ::protobuf::Message for VersionInfo {
        const NAME: &'static str = "VersionInfo";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.application)?;
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.runtime)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.application.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.runtime.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.application.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if let Some(v) = self.runtime.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> VersionInfo {
            VersionInfo::new()
        }

        fn clear(&mut self) {
            self.application.clear();
            self.runtime.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static VersionInfo {
            static instance: VersionInfo = VersionInfo {
                application: ::protobuf::MessageField::none(),
                runtime: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:fx.ipc.proto.Update.PatchInfo)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PatchInfo {
        // message fields
        // @@protoc_insertion_point(field:fx.ipc.proto.Update.PatchInfo.version)
        pub version: ::std::string::String,
        // @@protoc_insertion_point(field:fx.ipc.proto.Update.PatchInfo.platforms)
        pub platforms: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:fx.ipc.proto.Update.PatchInfo.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PatchInfo {
        fn default() -> &'a PatchInfo {
            <PatchInfo as ::protobuf::Message>::default_instance()
        }
    }

    impl PatchInfo {
        pub fn new() -> PatchInfo {
            ::std::default::Default::default()
        }
    }

    impl ::protobuf::Message for PatchInfo {
        const NAME: &'static str = "PatchInfo";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.version = is.read_string()?;
                    },
                    18 => {
                        let len = is.read_raw_varint32()?;
                        let old_limit = is.push_limit(len as u64)?;
                        let mut key = ::std::default::Default::default();
                        let mut value = ::std::default::Default::default();
                        while let Some(tag) = is.read_raw_tag_or_eof()? {
                            match tag {
                                10 => key = is.read_string()?,
                                18 => value = is.read_string()?,
                                _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                            };
                        }
                        is.pop_limit(old_limit);
                        self.platforms.insert(key, value);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.version.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.version);
            }
            for (k, v) in &self.platforms {
                let mut entry_size = 0;
                entry_size += ::protobuf::rt::string_size(1, &k);
                entry_size += ::protobuf::rt::string_size(2, &v);
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.version.is_empty() {
                os.write_string(1, &self.version)?;
            }
            for (k, v) in &self.platforms {
                let mut entry_size = 0;
                entry_size += ::protobuf::rt::string_size(1, &k);
                entry_size += ::protobuf::rt::string_size(2, &v);
                os.write_raw_varint32(18)?; // Tag.
                os.write_raw_varint32(entry_size as u32)?;
                os.write_string(1, &k)?;
                os.write_string(2, &v)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PatchInfo {
            PatchInfo::new()
        }

        fn clear(&mut self) {
            self.version.clear();
            self.platforms.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PatchInfo {
            static instance: ::protobuf::rt::Lazy<PatchInfo> = ::protobuf::rt::Lazy::new();
            instance.get(PatchInfo::new)
        }
    }

    // @@protoc_insertion_point(message:fx.ipc.proto.Update.DownloadProgress)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct DownloadProgress {
        // message fields
        // @@protoc_insertion_point(field:fx.ipc.proto.Update.DownloadProgress.total_size)
        pub total_size: u64,
        // @@protoc_insertion_point(field:fx.ipc.proto.Update.DownloadProgress.downloaded)
        pub downloaded: u64,
        // special fields
        // @@protoc_insertion_point(special_field:fx.ipc.proto.Update.DownloadProgress.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a DownloadProgress {
        fn default() -> &'a DownloadProgress {
            <DownloadProgress as ::protobuf::Message>::default_instance()
        }
    }

    impl DownloadProgress {
        pub fn new() -> DownloadProgress {
            ::std::default::Default::default()
        }
    }

    impl ::protobuf::Message for DownloadProgress {
        const NAME: &'static str = "DownloadProgress";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.total_size = is.read_uint64()?;
                    },
                    16 => {
                        self.downloaded = is.read_uint64()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.total_size != 0 {
                my_size += ::protobuf::rt::uint64_size(1, self.total_size);
            }
            if self.downloaded != 0 {
                my_size += ::protobuf::rt::uint64_size(2, self.downloaded);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.total_size != 0 {
                os.write_uint64(1, self.total_size)?;
            }
            if self.downloaded != 0 {
                os.write_uint64(2, self.downloaded)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> DownloadProgress {
            DownloadProgress::new()
        }

        fn clear(&mut self) {
            self.total_size = 0;
            self.downloaded = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static DownloadProgress {
            static instance: DownloadProgress = DownloadProgress {
                total_size: 0,
                downloaded: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:fx.ipc.proto.Update.State)
    pub enum State {
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Update.State.CHECKING_FOR_NEW_VERSION)
        CHECKING_FOR_NEW_VERSION = 0,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Update.State.UPDATE_AVAILABLE)
        UPDATE_AVAILABLE = 1,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Update.State.NO_UPDATE_AVAILABLE)
        NO_UPDATE_AVAILABLE = 2,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Update.State.DOWNLOADING)
        DOWNLOADING = 3,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Update.State.DOWNLOAD_FINISHED)
        DOWNLOAD_FINISHED = 4,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Update.State.INSTALLING)
        INSTALLING = 5,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Update.State.INSTALLATION_FINISHED)
        INSTALLATION_FINISHED = 6,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Update.State.ERROR)
        ERROR = 7,
    }

    impl ::protobuf::Enum for State {
        const NAME: &'static str = "State";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<State> {
            match value {
                0 => ::std::option::Option::Some(State::CHECKING_FOR_NEW_VERSION),
                1 => ::std::option::Option::Some(State::UPDATE_AVAILABLE),
                2 => ::std::option::Option::Some(State::NO_UPDATE_AVAILABLE),
                3 => ::std::option::Option::Some(State::DOWNLOADING),
                4 => ::std::option::Option::Some(State::DOWNLOAD_FINISHED),
                5 => ::std::option::Option::Some(State::INSTALLING),
                6 => ::std::option::Option::Some(State::INSTALLATION_FINISHED),
                7 => ::std::option::Option::Some(State::ERROR),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<State> {
            match str {
                "CHECKING_FOR_NEW_VERSION" => ::std::option::Option::Some(State::CHECKING_FOR_NEW_VERSION),
                "UPDATE_AVAILABLE" => ::std::option::Option::Some(State::UPDATE_AVAILABLE),
                "NO_UPDATE_AVAILABLE" => ::std::option::Option::Some(State::NO_UPDATE_AVAILABLE),
                "DOWNLOADING" => ::std::option::Option::Some(State::DOWNLOADING),
                "DOWNLOAD_FINISHED" => ::std::option::Option::Some(State::DOWNLOAD_FINISHED),
                "INSTALLING" => ::std::option::Option::Some(State::INSTALLING),
                "INSTALLATION_FINISHED" => ::std::option::Option::Some(State::INSTALLATION_FINISHED),
                "ERROR" => ::std::option::Option::Some(State::ERROR),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [State] = &[
            State::CHECKING_FOR_NEW_VERSION,
            State::UPDATE_AVAILABLE,
            State::NO_UPDATE_AVAILABLE,
            State::DOWNLOADING,
            State::DOWNLOAD_FINISHED,
            State::INSTALLING,
            State::INSTALLATION_FINISHED,
            State::ERROR,
        ];
    }

    impl ::std::default::Default for State {
        fn default() -> Self {
            State::CHECKING_FOR_NEW_VERSION
        }
    }

}

// @@protoc_insertion_point(message:fx.ipc.proto.GetUpdateStateRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetUpdateStateRequest {
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.GetUpdateStateRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetUpdateStateRequest {
    fn default() -> &'a GetUpdateStateRequest {
        <GetUpdateStateRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetUpdateStateRequest {
    pub fn new() -> GetUpdateStateRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetUpdateStateRequest {
    const NAME: &'static str = "GetUpdateStateRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetUpdateStateRequest {
        GetUpdateStateRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetUpdateStateRequest {
        static instance: GetUpdateStateRequest = GetUpdateStateRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.GetUpdateStateResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetUpdateStateResponse {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.GetUpdateStateResponse.state)
    pub state: ::protobuf::EnumOrUnknown<update::State>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.GetUpdateStateResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetUpdateStateResponse {
    fn default() -> &'a GetUpdateStateResponse {
        <GetUpdateStateResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetUpdateStateResponse {
    pub fn new() -> GetUpdateStateResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetUpdateStateResponse {
    const NAME: &'static str = "GetUpdateStateResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.state = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.state != ::protobuf::EnumOrUnknown::new(update::State::CHECKING_FOR_NEW_VERSION) {
            my_size += ::protobuf::rt::int32_size(1, self.state.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.state != ::protobuf::EnumOrUnknown::new(update::State::CHECKING_FOR_NEW_VERSION) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.state))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetUpdateStateResponse {
        GetUpdateStateResponse::new()
    }

    fn clear(&mut self) {
        self.state = ::protobuf::EnumOrUnknown::new(update::State::CHECKING_FOR_NEW_VERSION);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetUpdateStateResponse {
        static instance: GetUpdateStateResponse = GetUpdateStateResponse {
            state: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.GetUpdateInfoRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetUpdateInfoRequest {
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.GetUpdateInfoRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetUpdateInfoRequest {
    fn default() -> &'a GetUpdateInfoRequest {
        <GetUpdateInfoRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetUpdateInfoRequest {
    pub fn new() -> GetUpdateInfoRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetUpdateInfoRequest {
    const NAME: &'static str = "GetUpdateInfoRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetUpdateInfoRequest {
        GetUpdateInfoRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetUpdateInfoRequest {
        static instance: GetUpdateInfoRequest = GetUpdateInfoRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.GetUpdateInfoResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetUpdateInfoResponse {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.GetUpdateInfoResponse.info)
    pub info: ::protobuf::MessageField<update::VersionInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.GetUpdateInfoResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetUpdateInfoResponse {
    fn default() -> &'a GetUpdateInfoResponse {
        <GetUpdateInfoResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetUpdateInfoResponse {
    pub fn new() -> GetUpdateInfoResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetUpdateInfoResponse {
    const NAME: &'static str = "GetUpdateInfoResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.info)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetUpdateInfoResponse {
        GetUpdateInfoResponse::new()
    }

    fn clear(&mut self) {
        self.info.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetUpdateInfoResponse {
        static instance: GetUpdateInfoResponse = GetUpdateInfoResponse {
            info: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.UpdateEvent)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UpdateEvent {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.UpdateEvent.event)
    pub event: ::protobuf::EnumOrUnknown<update_event::Event>,
    // @@protoc_insertion_point(field:fx.ipc.proto.UpdateEvent.state_changed)
    pub state_changed: ::protobuf::MessageField<update_event::StateChanged>,
    // @@protoc_insertion_point(field:fx.ipc.proto.UpdateEvent.update_available)
    pub update_available: ::protobuf::MessageField<update_event::UpdateAvailable>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.UpdateEvent.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpdateEvent {
    fn default() -> &'a UpdateEvent {
        <UpdateEvent as ::protobuf::Message>::default_instance()
    }
}

impl UpdateEvent {
    pub fn new() -> UpdateEvent {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for UpdateEvent {
    const NAME: &'static str = "UpdateEvent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.event = is.read_enum_or_unknown()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.state_changed)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.update_available)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.event != ::protobuf::EnumOrUnknown::new(update_event::Event::STATE_CHANGED) {
            my_size += ::protobuf::rt::int32_size(1, self.event.value());
        }
        if let Some(v) = self.state_changed.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.update_available.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.event != ::protobuf::EnumOrUnknown::new(update_event::Event::STATE_CHANGED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.event))?;
        }
        if let Some(v) = self.state_changed.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.update_available.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpdateEvent {
        UpdateEvent::new()
    }

    fn clear(&mut self) {
        self.event = ::protobuf::EnumOrUnknown::new(update_event::Event::STATE_CHANGED);
        self.state_changed.clear();
        self.update_available.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpdateEvent {
        static instance: UpdateEvent = UpdateEvent {
            event: ::protobuf::EnumOrUnknown::from_i32(0),
            state_changed: ::protobuf::MessageField::none(),
            update_available: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `UpdateEvent`
pub mod update_event {
    // @@protoc_insertion_point(message:fx.ipc.proto.UpdateEvent.StateChanged)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct StateChanged {
        // message fields
        // @@protoc_insertion_point(field:fx.ipc.proto.UpdateEvent.StateChanged.new_state)
        pub new_state: ::protobuf::EnumOrUnknown<super::update::State>,
        // special fields
        // @@protoc_insertion_point(special_field:fx.ipc.proto.UpdateEvent.StateChanged.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a StateChanged {
        fn default() -> &'a StateChanged {
            <StateChanged as ::protobuf::Message>::default_instance()
        }
    }

    impl StateChanged {
        pub fn new() -> StateChanged {
            ::std::default::Default::default()
        }
    }

    impl ::protobuf::Message for StateChanged {
        const NAME: &'static str = "StateChanged";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.new_state = is.read_enum_or_unknown()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.new_state != ::protobuf::EnumOrUnknown::new(super::update::State::CHECKING_FOR_NEW_VERSION) {
                my_size += ::protobuf::rt::int32_size(1, self.new_state.value());
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.new_state != ::protobuf::EnumOrUnknown::new(super::update::State::CHECKING_FOR_NEW_VERSION) {
                os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.new_state))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> StateChanged {
            StateChanged::new()
        }

        fn clear(&mut self) {
            self.new_state = ::protobuf::EnumOrUnknown::new(super::update::State::CHECKING_FOR_NEW_VERSION);
            self.special_fields.clear();
        }

        fn default_instance() -> &'static StateChanged {
            static instance: StateChanged = StateChanged {
                new_state: ::protobuf::EnumOrUnknown::from_i32(0),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:fx.ipc.proto.UpdateEvent.UpdateAvailable)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct UpdateAvailable {
        // message fields
        // @@protoc_insertion_point(field:fx.ipc.proto.UpdateEvent.UpdateAvailable.version_info)
        pub version_info: ::protobuf::MessageField<super::update::VersionInfo>,
        // special fields
        // @@protoc_insertion_point(special_field:fx.ipc.proto.UpdateEvent.UpdateAvailable.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a UpdateAvailable {
        fn default() -> &'a UpdateAvailable {
            <UpdateAvailable as ::protobuf::Message>::default_instance()
        }
    }

    impl UpdateAvailable {
        pub fn new() -> UpdateAvailable {
            ::std::default::Default::default()
        }
    }

    impl ::protobuf::Message for UpdateAvailable {
        const NAME: &'static str = "UpdateAvailable";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.version_info)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.version_info.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.version_info.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> UpdateAvailable {
            UpdateAvailable::new()
        }

        fn clear(&mut self) {
            self.version_info.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static UpdateAvailable {
            static instance: UpdateAvailable = UpdateAvailable {
                version_info: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:fx.ipc.proto.UpdateEvent.Event)
    pub enum Event {
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.UpdateEvent.Event.STATE_CHANGED)
        STATE_CHANGED = 0,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.UpdateEvent.Event.UPDATE_AVAILABLE)
        UPDATE_AVAILABLE = 1,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.UpdateEvent.Event.DOWNLOAD_PROGRESS)
        DOWNLOAD_PROGRESS = 2,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.UpdateEvent.Event.INSTALLATION_PROGRESS)
        INSTALLATION_PROGRESS = 3,
    }

    impl ::protobuf::Enum for Event {
        const NAME: &'static str = "Event";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Event> {
            match value {
                0 => ::std::option::Option::Some(Event::STATE_CHANGED),
                1 => ::std::option::Option::Some(Event::UPDATE_AVAILABLE),
                2 => ::std::option::Option::Some(Event::DOWNLOAD_PROGRESS),
                3 => ::std::option::Option::Some(Event::INSTALLATION_PROGRESS),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Event> {
            match str {
                "STATE_CHANGED" => ::std::option::Option::Some(Event::STATE_CHANGED),
                "UPDATE_AVAILABLE" => ::std::option::Option::Some(Event::UPDATE_AVAILABLE),
                "DOWNLOAD_PROGRESS" => ::std::option::Option::Some(Event::DOWNLOAD_PROGRESS),
                "INSTALLATION_PROGRESS" => ::std::option::Option::Some(Event::INSTALLATION_PROGRESS),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Event] = &[
            Event::STATE_CHANGED,
            Event::UPDATE_AVAILABLE,
            Event::DOWNLOAD_PROGRESS,
            Event::INSTALLATION_PROGRESS,
        ];
    }

    impl ::std::default::Default for Event {
        fn default() -> Self {
            Event::STATE_CHANGED
        }
    }

}
