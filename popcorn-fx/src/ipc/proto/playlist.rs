// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc 29.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `playlist.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:fx.ipc.proto.Playlist)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Playlist {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.Playlist.items)
    pub items: ::std::vec::Vec<playlist::Item>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.Playlist.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Playlist {
    fn default() -> &'a Playlist {
        <Playlist as ::protobuf::Message>::default_instance()
    }
}

impl Playlist {
    pub fn new() -> Playlist {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Playlist {
    const NAME: &'static str = "Playlist";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.items.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.items {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Playlist {
        Playlist::new()
    }

    fn clear(&mut self) {
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Playlist {
        static instance: Playlist = Playlist {
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `Playlist`
pub mod playlist {
    // @@protoc_insertion_point(message:fx.ipc.proto.Playlist.Item)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Item {
        // message fields
        // @@protoc_insertion_point(field:fx.ipc.proto.Playlist.Item.url)
        pub url: ::std::string::String,
        // @@protoc_insertion_point(field:fx.ipc.proto.Playlist.Item.title)
        pub title: ::std::string::String,
        // @@protoc_insertion_point(field:fx.ipc.proto.Playlist.Item.caption)
        pub caption: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:fx.ipc.proto.Playlist.Item.thumb)
        pub thumb: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:fx.ipc.proto.Playlist.Item.quality)
        pub quality: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:fx.ipc.proto.Playlist.Item.parent_media)
        pub parent_media: ::protobuf::MessageField<super::super::media::media::Item>,
        // @@protoc_insertion_point(field:fx.ipc.proto.Playlist.Item.media)
        pub media: ::protobuf::MessageField<super::super::media::media::Item>,
        // @@protoc_insertion_point(field:fx.ipc.proto.Playlist.Item.auto_resume_timestamp)
        pub auto_resume_timestamp: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:fx.ipc.proto.Playlist.Item.subtitles_enabled)
        pub subtitles_enabled: bool,
        // @@protoc_insertion_point(field:fx.ipc.proto.Playlist.Item.torrent_filename)
        pub torrent_filename: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:fx.ipc.proto.Playlist.Item.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Item {
        fn default() -> &'a Item {
            <Item as ::protobuf::Message>::default_instance()
        }
    }

    impl Item {
        pub fn new() -> Item {
            ::std::default::Default::default()
        }
    }

    impl ::protobuf::Message for Item {
        const NAME: &'static str = "Item";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.url = is.read_string()?;
                    },
                    18 => {
                        self.title = is.read_string()?;
                    },
                    26 => {
                        self.caption = ::std::option::Option::Some(is.read_string()?);
                    },
                    34 => {
                        self.thumb = ::std::option::Option::Some(is.read_string()?);
                    },
                    42 => {
                        self.quality = ::std::option::Option::Some(is.read_string()?);
                    },
                    50 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.parent_media)?;
                    },
                    58 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.media)?;
                    },
                    64 => {
                        self.auto_resume_timestamp = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    72 => {
                        self.subtitles_enabled = is.read_bool()?;
                    },
                    82 => {
                        self.torrent_filename = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.url.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.url);
            }
            if !self.title.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.title);
            }
            if let Some(v) = self.caption.as_ref() {
                my_size += ::protobuf::rt::string_size(3, &v);
            }
            if let Some(v) = self.thumb.as_ref() {
                my_size += ::protobuf::rt::string_size(4, &v);
            }
            if let Some(v) = self.quality.as_ref() {
                my_size += ::protobuf::rt::string_size(5, &v);
            }
            if let Some(v) = self.parent_media.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.media.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.auto_resume_timestamp {
                my_size += ::protobuf::rt::uint64_size(8, v);
            }
            if self.subtitles_enabled != false {
                my_size += 1 + 1;
            }
            if let Some(v) = self.torrent_filename.as_ref() {
                my_size += ::protobuf::rt::string_size(10, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.url.is_empty() {
                os.write_string(1, &self.url)?;
            }
            if !self.title.is_empty() {
                os.write_string(2, &self.title)?;
            }
            if let Some(v) = self.caption.as_ref() {
                os.write_string(3, v)?;
            }
            if let Some(v) = self.thumb.as_ref() {
                os.write_string(4, v)?;
            }
            if let Some(v) = self.quality.as_ref() {
                os.write_string(5, v)?;
            }
            if let Some(v) = self.parent_media.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
            }
            if let Some(v) = self.media.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
            }
            if let Some(v) = self.auto_resume_timestamp {
                os.write_uint64(8, v)?;
            }
            if self.subtitles_enabled != false {
                os.write_bool(9, self.subtitles_enabled)?;
            }
            if let Some(v) = self.torrent_filename.as_ref() {
                os.write_string(10, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Item {
            Item::new()
        }

        fn clear(&mut self) {
            self.url.clear();
            self.title.clear();
            self.caption = ::std::option::Option::None;
            self.thumb = ::std::option::Option::None;
            self.quality = ::std::option::Option::None;
            self.parent_media.clear();
            self.media.clear();
            self.auto_resume_timestamp = ::std::option::Option::None;
            self.subtitles_enabled = false;
            self.torrent_filename = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Item {
            static instance: Item = Item {
                url: ::std::string::String::new(),
                title: ::std::string::String::new(),
                caption: ::std::option::Option::None,
                thumb: ::std::option::Option::None,
                quality: ::std::option::Option::None,
                parent_media: ::protobuf::MessageField::none(),
                media: ::protobuf::MessageField::none(),
                auto_resume_timestamp: ::std::option::Option::None,
                subtitles_enabled: false,
                torrent_filename: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.PlayRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlayRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.PlayRequest.url)
    pub url: ::std::string::String,
    // @@protoc_insertion_point(field:fx.ipc.proto.PlayRequest.title)
    pub title: ::std::string::String,
    // @@protoc_insertion_point(field:fx.ipc.proto.PlayRequest.caption)
    pub caption: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:fx.ipc.proto.PlayRequest.thumb)
    pub thumb: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:fx.ipc.proto.PlayRequest.background)
    pub background: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:fx.ipc.proto.PlayRequest.quality)
    pub quality: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:fx.ipc.proto.PlayRequest.auto_resume_timestamp)
    pub auto_resume_timestamp: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:fx.ipc.proto.PlayRequest.torrent_handle)
    pub torrent_handle: ::std::option::Option<i64>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.PlayRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlayRequest {
    fn default() -> &'a PlayRequest {
        <PlayRequest as ::protobuf::Message>::default_instance()
    }
}

impl PlayRequest {
    pub fn new() -> PlayRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for PlayRequest {
    const NAME: &'static str = "PlayRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.url = is.read_string()?;
                },
                18 => {
                    self.title = is.read_string()?;
                },
                26 => {
                    self.caption = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.thumb = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.background = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    self.quality = ::std::option::Option::Some(is.read_string()?);
                },
                56 => {
                    self.auto_resume_timestamp = ::std::option::Option::Some(is.read_uint64()?);
                },
                64 => {
                    self.torrent_handle = ::std::option::Option::Some(is.read_int64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.url.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.url);
        }
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.title);
        }
        if let Some(v) = self.caption.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.thumb.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.background.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.quality.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.auto_resume_timestamp {
            my_size += ::protobuf::rt::uint64_size(7, v);
        }
        if let Some(v) = self.torrent_handle {
            my_size += ::protobuf::rt::int64_size(8, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.url.is_empty() {
            os.write_string(1, &self.url)?;
        }
        if !self.title.is_empty() {
            os.write_string(2, &self.title)?;
        }
        if let Some(v) = self.caption.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.thumb.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.background.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.quality.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.auto_resume_timestamp {
            os.write_uint64(7, v)?;
        }
        if let Some(v) = self.torrent_handle {
            os.write_int64(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlayRequest {
        PlayRequest::new()
    }

    fn clear(&mut self) {
        self.url.clear();
        self.title.clear();
        self.caption = ::std::option::Option::None;
        self.thumb = ::std::option::Option::None;
        self.background = ::std::option::Option::None;
        self.quality = ::std::option::Option::None;
        self.auto_resume_timestamp = ::std::option::Option::None;
        self.torrent_handle = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlayRequest {
        static instance: PlayRequest = PlayRequest {
            url: ::std::string::String::new(),
            title: ::std::string::String::new(),
            caption: ::std::option::Option::None,
            thumb: ::std::option::Option::None,
            background: ::std::option::Option::None,
            quality: ::std::option::Option::None,
            auto_resume_timestamp: ::std::option::Option::None,
            torrent_handle: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `PlayRequest`
pub mod play_request {
    // @@protoc_insertion_point(message:fx.ipc.proto.PlayRequest.PlaybackSubtitle)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PlaybackSubtitle {
        // message fields
        // @@protoc_insertion_point(field:fx.ipc.proto.PlayRequest.PlaybackSubtitle.enabled)
        pub enabled: bool,
        // @@protoc_insertion_point(field:fx.ipc.proto.PlayRequest.PlaybackSubtitle.subtitle)
        pub subtitle: ::protobuf::MessageField<super::super::subtitle::subtitle::Info>,
        // special fields
        // @@protoc_insertion_point(special_field:fx.ipc.proto.PlayRequest.PlaybackSubtitle.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PlaybackSubtitle {
        fn default() -> &'a PlaybackSubtitle {
            <PlaybackSubtitle as ::protobuf::Message>::default_instance()
        }
    }

    impl PlaybackSubtitle {
        pub fn new() -> PlaybackSubtitle {
            ::std::default::Default::default()
        }
    }

    impl ::protobuf::Message for PlaybackSubtitle {
        const NAME: &'static str = "PlaybackSubtitle";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.enabled = is.read_bool()?;
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.subtitle)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.enabled != false {
                my_size += 1 + 1;
            }
            if let Some(v) = self.subtitle.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.enabled != false {
                os.write_bool(1, self.enabled)?;
            }
            if let Some(v) = self.subtitle.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PlaybackSubtitle {
            PlaybackSubtitle::new()
        }

        fn clear(&mut self) {
            self.enabled = false;
            self.subtitle.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PlaybackSubtitle {
            static instance: PlaybackSubtitle = PlaybackSubtitle {
                enabled: false,
                subtitle: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}
