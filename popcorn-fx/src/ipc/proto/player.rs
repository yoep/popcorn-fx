// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc 29.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `player.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:fx.ipc.proto.DiscoverPlayersRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DiscoverPlayersRequest {
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.DiscoverPlayersRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DiscoverPlayersRequest {
    fn default() -> &'a DiscoverPlayersRequest {
        <DiscoverPlayersRequest as ::protobuf::Message>::default_instance()
    }
}

impl DiscoverPlayersRequest {
    pub fn new() -> DiscoverPlayersRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for DiscoverPlayersRequest {
    const NAME: &'static str = "DiscoverPlayersRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DiscoverPlayersRequest {
        DiscoverPlayersRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DiscoverPlayersRequest {
        static instance: DiscoverPlayersRequest = DiscoverPlayersRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.StartPlayersDiscoveryRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StartPlayersDiscoveryRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.StartPlayersDiscoveryRequest.interval_seconds)
    pub interval_seconds: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.StartPlayersDiscoveryRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StartPlayersDiscoveryRequest {
    fn default() -> &'a StartPlayersDiscoveryRequest {
        <StartPlayersDiscoveryRequest as ::protobuf::Message>::default_instance()
    }
}

impl StartPlayersDiscoveryRequest {
    pub fn new() -> StartPlayersDiscoveryRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for StartPlayersDiscoveryRequest {
    const NAME: &'static str = "StartPlayersDiscoveryRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.interval_seconds = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.interval_seconds {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.interval_seconds {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StartPlayersDiscoveryRequest {
        StartPlayersDiscoveryRequest::new()
    }

    fn clear(&mut self) {
        self.interval_seconds = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StartPlayersDiscoveryRequest {
        static instance: StartPlayersDiscoveryRequest = StartPlayersDiscoveryRequest {
            interval_seconds: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.Player)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Player {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.Player.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:fx.ipc.proto.Player.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:fx.ipc.proto.Player.description)
    pub description: ::std::string::String,
    // @@protoc_insertion_point(field:fx.ipc.proto.Player.graphic_resource)
    pub graphic_resource: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:fx.ipc.proto.Player.state)
    pub state: ::protobuf::EnumOrUnknown<player::State>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.Player.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Player {
    fn default() -> &'a Player {
        <Player as ::protobuf::Message>::default_instance()
    }
}

impl Player {
    pub fn new() -> Player {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Player {
    const NAME: &'static str = "Player";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                26 => {
                    self.description = is.read_string()?;
                },
                34 => {
                    self.graphic_resource = is.read_bytes()?;
                },
                40 => {
                    self.state = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        if !self.graphic_resource.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.graphic_resource);
        }
        if self.state != ::protobuf::EnumOrUnknown::new(player::State::READY) {
            my_size += ::protobuf::rt::int32_size(5, self.state.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        if !self.graphic_resource.is_empty() {
            os.write_bytes(4, &self.graphic_resource)?;
        }
        if self.state != ::protobuf::EnumOrUnknown::new(player::State::READY) {
            os.write_enum(5, ::protobuf::EnumOrUnknown::value(&self.state))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Player {
        Player::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.description.clear();
        self.graphic_resource.clear();
        self.state = ::protobuf::EnumOrUnknown::new(player::State::READY);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Player {
        static instance: Player = Player {
            id: ::std::string::String::new(),
            name: ::std::string::String::new(),
            description: ::std::string::String::new(),
            graphic_resource: ::std::vec::Vec::new(),
            state: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `Player`
pub mod player {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:fx.ipc.proto.Player.State)
    pub enum State {
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Player.State.READY)
        READY = 0,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Player.State.LOADING)
        LOADING = 1,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Player.State.BUFFERING)
        BUFFERING = 2,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Player.State.PLAYING)
        PLAYING = 3,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Player.State.PAUSED)
        PAUSED = 4,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Player.State.STOPPED)
        STOPPED = 5,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Player.State.ERROR)
        ERROR = 6,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Player.State.UNKNOWN)
        UNKNOWN = -1,
    }

    impl ::protobuf::Enum for State {
        const NAME: &'static str = "State";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<State> {
            match value {
                0 => ::std::option::Option::Some(State::READY),
                1 => ::std::option::Option::Some(State::LOADING),
                2 => ::std::option::Option::Some(State::BUFFERING),
                3 => ::std::option::Option::Some(State::PLAYING),
                4 => ::std::option::Option::Some(State::PAUSED),
                5 => ::std::option::Option::Some(State::STOPPED),
                6 => ::std::option::Option::Some(State::ERROR),
                -1 => ::std::option::Option::Some(State::UNKNOWN),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<State> {
            match str {
                "READY" => ::std::option::Option::Some(State::READY),
                "LOADING" => ::std::option::Option::Some(State::LOADING),
                "BUFFERING" => ::std::option::Option::Some(State::BUFFERING),
                "PLAYING" => ::std::option::Option::Some(State::PLAYING),
                "PAUSED" => ::std::option::Option::Some(State::PAUSED),
                "STOPPED" => ::std::option::Option::Some(State::STOPPED),
                "ERROR" => ::std::option::Option::Some(State::ERROR),
                "UNKNOWN" => ::std::option::Option::Some(State::UNKNOWN),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [State] = &[
            State::READY,
            State::LOADING,
            State::BUFFERING,
            State::PLAYING,
            State::PAUSED,
            State::STOPPED,
            State::ERROR,
            State::UNKNOWN,
        ];
    }

    impl ::std::default::Default for State {
        fn default() -> Self {
            State::READY
        }
    }

}

// @@protoc_insertion_point(message:fx.ipc.proto.GetPlayerByIdRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPlayerByIdRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.GetPlayerByIdRequest.id)
    pub id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.GetPlayerByIdRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPlayerByIdRequest {
    fn default() -> &'a GetPlayerByIdRequest {
        <GetPlayerByIdRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPlayerByIdRequest {
    pub fn new() -> GetPlayerByIdRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetPlayerByIdRequest {
    const NAME: &'static str = "GetPlayerByIdRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPlayerByIdRequest {
        GetPlayerByIdRequest::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPlayerByIdRequest {
        static instance: GetPlayerByIdRequest = GetPlayerByIdRequest {
            id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.GetPlayerByIdResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPlayerByIdResponse {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.GetPlayerByIdResponse.player)
    pub player: ::protobuf::MessageField<Player>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.GetPlayerByIdResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPlayerByIdResponse {
    fn default() -> &'a GetPlayerByIdResponse {
        <GetPlayerByIdResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetPlayerByIdResponse {
    pub fn new() -> GetPlayerByIdResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetPlayerByIdResponse {
    const NAME: &'static str = "GetPlayerByIdResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.player)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.player.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.player.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPlayerByIdResponse {
        GetPlayerByIdResponse::new()
    }

    fn clear(&mut self) {
        self.player.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPlayerByIdResponse {
        static instance: GetPlayerByIdResponse = GetPlayerByIdResponse {
            player: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.GetPlayersRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPlayersRequest {
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.GetPlayersRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPlayersRequest {
    fn default() -> &'a GetPlayersRequest {
        <GetPlayersRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPlayersRequest {
    pub fn new() -> GetPlayersRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetPlayersRequest {
    const NAME: &'static str = "GetPlayersRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPlayersRequest {
        GetPlayersRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPlayersRequest {
        static instance: GetPlayersRequest = GetPlayersRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.GetPlayersResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPlayersResponse {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.GetPlayersResponse.players)
    pub players: ::std::vec::Vec<Player>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.GetPlayersResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPlayersResponse {
    fn default() -> &'a GetPlayersResponse {
        <GetPlayersResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetPlayersResponse {
    pub fn new() -> GetPlayersResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetPlayersResponse {
    const NAME: &'static str = "GetPlayersResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.players.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.players {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.players {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPlayersResponse {
        GetPlayersResponse::new()
    }

    fn clear(&mut self) {
        self.players.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPlayersResponse {
        static instance: GetPlayersResponse = GetPlayersResponse {
            players: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.GetActivePlayerRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetActivePlayerRequest {
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.GetActivePlayerRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetActivePlayerRequest {
    fn default() -> &'a GetActivePlayerRequest {
        <GetActivePlayerRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetActivePlayerRequest {
    pub fn new() -> GetActivePlayerRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetActivePlayerRequest {
    const NAME: &'static str = "GetActivePlayerRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetActivePlayerRequest {
        GetActivePlayerRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetActivePlayerRequest {
        static instance: GetActivePlayerRequest = GetActivePlayerRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.GetActivePlayerResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetActivePlayerResponse {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.GetActivePlayerResponse.player)
    pub player: ::protobuf::MessageField<Player>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.GetActivePlayerResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetActivePlayerResponse {
    fn default() -> &'a GetActivePlayerResponse {
        <GetActivePlayerResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetActivePlayerResponse {
    pub fn new() -> GetActivePlayerResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetActivePlayerResponse {
    const NAME: &'static str = "GetActivePlayerResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.player)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.player.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.player.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetActivePlayerResponse {
        GetActivePlayerResponse::new()
    }

    fn clear(&mut self) {
        self.player.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetActivePlayerResponse {
        static instance: GetActivePlayerResponse = GetActivePlayerResponse {
            player: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.UpdateActivePlayerRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UpdateActivePlayerRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.UpdateActivePlayerRequest.player)
    pub player: ::protobuf::MessageField<Player>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.UpdateActivePlayerRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpdateActivePlayerRequest {
    fn default() -> &'a UpdateActivePlayerRequest {
        <UpdateActivePlayerRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateActivePlayerRequest {
    pub fn new() -> UpdateActivePlayerRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for UpdateActivePlayerRequest {
    const NAME: &'static str = "UpdateActivePlayerRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.player)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.player.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.player.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpdateActivePlayerRequest {
        UpdateActivePlayerRequest::new()
    }

    fn clear(&mut self) {
        self.player.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpdateActivePlayerRequest {
        static instance: UpdateActivePlayerRequest = UpdateActivePlayerRequest {
            player: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.RegisterPlayerRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RegisterPlayerRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.RegisterPlayerRequest.player)
    pub player: ::protobuf::MessageField<Player>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.RegisterPlayerRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RegisterPlayerRequest {
    fn default() -> &'a RegisterPlayerRequest {
        <RegisterPlayerRequest as ::protobuf::Message>::default_instance()
    }
}

impl RegisterPlayerRequest {
    pub fn new() -> RegisterPlayerRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for RegisterPlayerRequest {
    const NAME: &'static str = "RegisterPlayerRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.player)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.player.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.player.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RegisterPlayerRequest {
        RegisterPlayerRequest::new()
    }

    fn clear(&mut self) {
        self.player.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RegisterPlayerRequest {
        static instance: RegisterPlayerRequest = RegisterPlayerRequest {
            player: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.RegisterPlayerResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RegisterPlayerResponse {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.RegisterPlayerResponse.result)
    pub result: ::protobuf::EnumOrUnknown<super::message::response::Result>,
    // @@protoc_insertion_point(field:fx.ipc.proto.RegisterPlayerResponse.error)
    pub error: ::protobuf::EnumOrUnknown<register_player_response::Error>,
    // @@protoc_insertion_point(field:fx.ipc.proto.RegisterPlayerResponse.duplicate_player)
    pub duplicate_player: ::protobuf::MessageField<register_player_response::DuplicatePlayer>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.RegisterPlayerResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RegisterPlayerResponse {
    fn default() -> &'a RegisterPlayerResponse {
        <RegisterPlayerResponse as ::protobuf::Message>::default_instance()
    }
}

impl RegisterPlayerResponse {
    pub fn new() -> RegisterPlayerResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for RegisterPlayerResponse {
    const NAME: &'static str = "RegisterPlayerResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.error = is.read_enum_or_unknown()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.duplicate_player)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.result != ::protobuf::EnumOrUnknown::new(super::message::response::Result::OK) {
            my_size += ::protobuf::rt::int32_size(1, self.result.value());
        }
        if self.error != ::protobuf::EnumOrUnknown::new(register_player_response::Error::DUPLICATE_PLAYER) {
            my_size += ::protobuf::rt::int32_size(2, self.error.value());
        }
        if let Some(v) = self.duplicate_player.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.result != ::protobuf::EnumOrUnknown::new(super::message::response::Result::OK) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.result))?;
        }
        if self.error != ::protobuf::EnumOrUnknown::new(register_player_response::Error::DUPLICATE_PLAYER) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.error))?;
        }
        if let Some(v) = self.duplicate_player.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RegisterPlayerResponse {
        RegisterPlayerResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::protobuf::EnumOrUnknown::new(super::message::response::Result::OK);
        self.error = ::protobuf::EnumOrUnknown::new(register_player_response::Error::DUPLICATE_PLAYER);
        self.duplicate_player.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RegisterPlayerResponse {
        static instance: RegisterPlayerResponse = RegisterPlayerResponse {
            result: ::protobuf::EnumOrUnknown::from_i32(0),
            error: ::protobuf::EnumOrUnknown::from_i32(0),
            duplicate_player: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `RegisterPlayerResponse`
pub mod register_player_response {
    // @@protoc_insertion_point(message:fx.ipc.proto.RegisterPlayerResponse.DuplicatePlayer)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct DuplicatePlayer {
        // message fields
        // @@protoc_insertion_point(field:fx.ipc.proto.RegisterPlayerResponse.DuplicatePlayer.id)
        pub id: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:fx.ipc.proto.RegisterPlayerResponse.DuplicatePlayer.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a DuplicatePlayer {
        fn default() -> &'a DuplicatePlayer {
            <DuplicatePlayer as ::protobuf::Message>::default_instance()
        }
    }

    impl DuplicatePlayer {
        pub fn new() -> DuplicatePlayer {
            ::std::default::Default::default()
        }
    }

    impl ::protobuf::Message for DuplicatePlayer {
        const NAME: &'static str = "DuplicatePlayer";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.id = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.id.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.id);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.id.is_empty() {
                os.write_string(1, &self.id)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> DuplicatePlayer {
            DuplicatePlayer::new()
        }

        fn clear(&mut self) {
            self.id.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static DuplicatePlayer {
            static instance: DuplicatePlayer = DuplicatePlayer {
                id: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:fx.ipc.proto.RegisterPlayerResponse.Error)
    pub enum Error {
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.RegisterPlayerResponse.Error.DUPLICATE_PLAYER)
        DUPLICATE_PLAYER = 0,
    }

    impl ::protobuf::Enum for Error {
        const NAME: &'static str = "Error";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Error> {
            match value {
                0 => ::std::option::Option::Some(Error::DUPLICATE_PLAYER),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Error> {
            match str {
                "DUPLICATE_PLAYER" => ::std::option::Option::Some(Error::DUPLICATE_PLAYER),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Error] = &[
            Error::DUPLICATE_PLAYER,
        ];
    }

    impl ::std::default::Default for Error {
        fn default() -> Self {
            Error::DUPLICATE_PLAYER
        }
    }

}

// @@protoc_insertion_point(message:fx.ipc.proto.RemovePlayerRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RemovePlayerRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.RemovePlayerRequest.player)
    pub player: ::protobuf::MessageField<Player>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.RemovePlayerRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RemovePlayerRequest {
    fn default() -> &'a RemovePlayerRequest {
        <RemovePlayerRequest as ::protobuf::Message>::default_instance()
    }
}

impl RemovePlayerRequest {
    pub fn new() -> RemovePlayerRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for RemovePlayerRequest {
    const NAME: &'static str = "RemovePlayerRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.player)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.player.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.player.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RemovePlayerRequest {
        RemovePlayerRequest::new()
    }

    fn clear(&mut self) {
        self.player.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RemovePlayerRequest {
        static instance: RemovePlayerRequest = RemovePlayerRequest {
            player: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}
