// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc 29.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `tracking.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:fx.ipc.proto.TrackingProvider)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TrackingProvider {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.TrackingProvider.id)
    pub id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.TrackingProvider.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TrackingProvider {
    fn default() -> &'a TrackingProvider {
        <TrackingProvider as ::protobuf::Message>::default_instance()
    }
}

impl TrackingProvider {
    pub fn new() -> TrackingProvider {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for TrackingProvider {
    const NAME: &'static str = "TrackingProvider";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TrackingProvider {
        TrackingProvider::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TrackingProvider {
        static instance: TrackingProvider = TrackingProvider {
            id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `TrackingProvider`
pub mod tracking_provider {
    // @@protoc_insertion_point(message:fx.ipc.proto.TrackingProvider.AuthorizationError)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct AuthorizationError {
        // message fields
        // @@protoc_insertion_point(field:fx.ipc.proto.TrackingProvider.AuthorizationError.type)
        pub type_: ::protobuf::EnumOrUnknown<authorization_error::Type>,
        // special fields
        // @@protoc_insertion_point(special_field:fx.ipc.proto.TrackingProvider.AuthorizationError.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a AuthorizationError {
        fn default() -> &'a AuthorizationError {
            <AuthorizationError as ::protobuf::Message>::default_instance()
        }
    }

    impl AuthorizationError {
        pub fn new() -> AuthorizationError {
            ::std::default::Default::default()
        }
    }

    impl ::protobuf::Message for AuthorizationError {
        const NAME: &'static str = "AuthorizationError";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.type_ = is.read_enum_or_unknown()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.type_ != ::protobuf::EnumOrUnknown::new(authorization_error::Type::CSRF_FAILURE) {
                my_size += ::protobuf::rt::int32_size(1, self.type_.value());
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.type_ != ::protobuf::EnumOrUnknown::new(authorization_error::Type::CSRF_FAILURE) {
                os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> AuthorizationError {
            AuthorizationError::new()
        }

        fn clear(&mut self) {
            self.type_ = ::protobuf::EnumOrUnknown::new(authorization_error::Type::CSRF_FAILURE);
            self.special_fields.clear();
        }

        fn default_instance() -> &'static AuthorizationError {
            static instance: AuthorizationError = AuthorizationError {
                type_: ::protobuf::EnumOrUnknown::from_i32(0),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    /// Nested message and enums of message `AuthorizationError`
    pub mod authorization_error {
        #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
        // @@protoc_insertion_point(enum:fx.ipc.proto.TrackingProvider.AuthorizationError.Type)
        pub enum Type {
            // @@protoc_insertion_point(enum_value:fx.ipc.proto.TrackingProvider.AuthorizationError.Type.CSRF_FAILURE)
            CSRF_FAILURE = 0,
            // @@protoc_insertion_point(enum_value:fx.ipc.proto.TrackingProvider.AuthorizationError.Type.AUTHORIZATION_CODE)
            AUTHORIZATION_CODE = 1,
            // @@protoc_insertion_point(enum_value:fx.ipc.proto.TrackingProvider.AuthorizationError.Type.TOKEN)
            TOKEN = 2,
            // @@protoc_insertion_point(enum_value:fx.ipc.proto.TrackingProvider.AuthorizationError.Type.AUTHORIZATION_URI_OPEN)
            AUTHORIZATION_URI_OPEN = 3,
        }

        impl ::protobuf::Enum for Type {
            const NAME: &'static str = "Type";

            fn value(&self) -> i32 {
                *self as i32
            }

            fn from_i32(value: i32) -> ::std::option::Option<Type> {
                match value {
                    0 => ::std::option::Option::Some(Type::CSRF_FAILURE),
                    1 => ::std::option::Option::Some(Type::AUTHORIZATION_CODE),
                    2 => ::std::option::Option::Some(Type::TOKEN),
                    3 => ::std::option::Option::Some(Type::AUTHORIZATION_URI_OPEN),
                    _ => ::std::option::Option::None
                }
            }

            fn from_str(str: &str) -> ::std::option::Option<Type> {
                match str {
                    "CSRF_FAILURE" => ::std::option::Option::Some(Type::CSRF_FAILURE),
                    "AUTHORIZATION_CODE" => ::std::option::Option::Some(Type::AUTHORIZATION_CODE),
                    "TOKEN" => ::std::option::Option::Some(Type::TOKEN),
                    "AUTHORIZATION_URI_OPEN" => ::std::option::Option::Some(Type::AUTHORIZATION_URI_OPEN),
                    _ => ::std::option::Option::None
                }
            }

            const VALUES: &'static [Type] = &[
                Type::CSRF_FAILURE,
                Type::AUTHORIZATION_CODE,
                Type::TOKEN,
                Type::AUTHORIZATION_URI_OPEN,
            ];
        }

        impl ::std::default::Default for Type {
            fn default() -> Self {
                Type::CSRF_FAILURE
            }
        }

    }

    // @@protoc_insertion_point(message:fx.ipc.proto.TrackingProvider.TrackingError)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct TrackingError {
        // message fields
        // @@protoc_insertion_point(field:fx.ipc.proto.TrackingProvider.TrackingError.type)
        pub type_: ::protobuf::EnumOrUnknown<tracking_error::Type>,
        // special fields
        // @@protoc_insertion_point(special_field:fx.ipc.proto.TrackingProvider.TrackingError.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a TrackingError {
        fn default() -> &'a TrackingError {
            <TrackingError as ::protobuf::Message>::default_instance()
        }
    }

    impl TrackingError {
        pub fn new() -> TrackingError {
            ::std::default::Default::default()
        }
    }

    impl ::protobuf::Message for TrackingError {
        const NAME: &'static str = "TrackingError";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.type_ = is.read_enum_or_unknown()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.type_ != ::protobuf::EnumOrUnknown::new(tracking_error::Type::UNAUTHORIZED) {
                my_size += ::protobuf::rt::int32_size(1, self.type_.value());
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.type_ != ::protobuf::EnumOrUnknown::new(tracking_error::Type::UNAUTHORIZED) {
                os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> TrackingError {
            TrackingError::new()
        }

        fn clear(&mut self) {
            self.type_ = ::protobuf::EnumOrUnknown::new(tracking_error::Type::UNAUTHORIZED);
            self.special_fields.clear();
        }

        fn default_instance() -> &'static TrackingError {
            static instance: TrackingError = TrackingError {
                type_: ::protobuf::EnumOrUnknown::from_i32(0),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    /// Nested message and enums of message `TrackingError`
    pub mod tracking_error {
        #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
        // @@protoc_insertion_point(enum:fx.ipc.proto.TrackingProvider.TrackingError.Type)
        pub enum Type {
            // @@protoc_insertion_point(enum_value:fx.ipc.proto.TrackingProvider.TrackingError.Type.UNAUTHORIZED)
            UNAUTHORIZED = 0,
            // @@protoc_insertion_point(enum_value:fx.ipc.proto.TrackingProvider.TrackingError.Type.REQUEST)
            REQUEST = 1,
            // @@protoc_insertion_point(enum_value:fx.ipc.proto.TrackingProvider.TrackingError.Type.PARSING)
            PARSING = 2,
        }

        impl ::protobuf::Enum for Type {
            const NAME: &'static str = "Type";

            fn value(&self) -> i32 {
                *self as i32
            }

            fn from_i32(value: i32) -> ::std::option::Option<Type> {
                match value {
                    0 => ::std::option::Option::Some(Type::UNAUTHORIZED),
                    1 => ::std::option::Option::Some(Type::REQUEST),
                    2 => ::std::option::Option::Some(Type::PARSING),
                    _ => ::std::option::Option::None
                }
            }

            fn from_str(str: &str) -> ::std::option::Option<Type> {
                match str {
                    "UNAUTHORIZED" => ::std::option::Option::Some(Type::UNAUTHORIZED),
                    "REQUEST" => ::std::option::Option::Some(Type::REQUEST),
                    "PARSING" => ::std::option::Option::Some(Type::PARSING),
                    _ => ::std::option::Option::None
                }
            }

            const VALUES: &'static [Type] = &[
                Type::UNAUTHORIZED,
                Type::REQUEST,
                Type::PARSING,
            ];
        }

        impl ::std::default::Default for Type {
            fn default() -> Self {
                Type::UNAUTHORIZED
            }
        }

    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:fx.ipc.proto.TrackingProvider.AuthorizationState)
    pub enum AuthorizationState {
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.TrackingProvider.AuthorizationState.AUTHORIZED)
        AUTHORIZED = 0,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.TrackingProvider.AuthorizationState.UNAUTHORIZED)
        UNAUTHORIZED = 1,
    }

    impl ::protobuf::Enum for AuthorizationState {
        const NAME: &'static str = "AuthorizationState";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<AuthorizationState> {
            match value {
                0 => ::std::option::Option::Some(AuthorizationState::AUTHORIZED),
                1 => ::std::option::Option::Some(AuthorizationState::UNAUTHORIZED),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<AuthorizationState> {
            match str {
                "AUTHORIZED" => ::std::option::Option::Some(AuthorizationState::AUTHORIZED),
                "UNAUTHORIZED" => ::std::option::Option::Some(AuthorizationState::UNAUTHORIZED),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [AuthorizationState] = &[
            AuthorizationState::AUTHORIZED,
            AuthorizationState::UNAUTHORIZED,
        ];
    }

    impl ::std::default::Default for AuthorizationState {
        fn default() -> Self {
            AuthorizationState::AUTHORIZED
        }
    }

}

// @@protoc_insertion_point(message:fx.ipc.proto.GetTrackingProviderIsAuthorizedRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetTrackingProviderIsAuthorizedRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.GetTrackingProviderIsAuthorizedRequest.tracking_provider_id)
    pub tracking_provider_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.GetTrackingProviderIsAuthorizedRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetTrackingProviderIsAuthorizedRequest {
    fn default() -> &'a GetTrackingProviderIsAuthorizedRequest {
        <GetTrackingProviderIsAuthorizedRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetTrackingProviderIsAuthorizedRequest {
    pub fn new() -> GetTrackingProviderIsAuthorizedRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetTrackingProviderIsAuthorizedRequest {
    const NAME: &'static str = "GetTrackingProviderIsAuthorizedRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.tracking_provider_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.tracking_provider_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.tracking_provider_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.tracking_provider_id.is_empty() {
            os.write_string(1, &self.tracking_provider_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetTrackingProviderIsAuthorizedRequest {
        GetTrackingProviderIsAuthorizedRequest::new()
    }

    fn clear(&mut self) {
        self.tracking_provider_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetTrackingProviderIsAuthorizedRequest {
        static instance: GetTrackingProviderIsAuthorizedRequest = GetTrackingProviderIsAuthorizedRequest {
            tracking_provider_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.GetTrackingProviderIsAuthorizedResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetTrackingProviderIsAuthorizedResponse {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.GetTrackingProviderIsAuthorizedResponse.is_authorized)
    pub is_authorized: bool,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.GetTrackingProviderIsAuthorizedResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetTrackingProviderIsAuthorizedResponse {
    fn default() -> &'a GetTrackingProviderIsAuthorizedResponse {
        <GetTrackingProviderIsAuthorizedResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetTrackingProviderIsAuthorizedResponse {
    pub fn new() -> GetTrackingProviderIsAuthorizedResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetTrackingProviderIsAuthorizedResponse {
    const NAME: &'static str = "GetTrackingProviderIsAuthorizedResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.is_authorized = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.is_authorized != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.is_authorized != false {
            os.write_bool(1, self.is_authorized)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetTrackingProviderIsAuthorizedResponse {
        GetTrackingProviderIsAuthorizedResponse::new()
    }

    fn clear(&mut self) {
        self.is_authorized = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetTrackingProviderIsAuthorizedResponse {
        static instance: GetTrackingProviderIsAuthorizedResponse = GetTrackingProviderIsAuthorizedResponse {
            is_authorized: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.TrackingProviderAuthorizeRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TrackingProviderAuthorizeRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.TrackingProviderAuthorizeRequest.tracking_provider_id)
    pub tracking_provider_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.TrackingProviderAuthorizeRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TrackingProviderAuthorizeRequest {
    fn default() -> &'a TrackingProviderAuthorizeRequest {
        <TrackingProviderAuthorizeRequest as ::protobuf::Message>::default_instance()
    }
}

impl TrackingProviderAuthorizeRequest {
    pub fn new() -> TrackingProviderAuthorizeRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for TrackingProviderAuthorizeRequest {
    const NAME: &'static str = "TrackingProviderAuthorizeRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.tracking_provider_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.tracking_provider_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.tracking_provider_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.tracking_provider_id.is_empty() {
            os.write_string(1, &self.tracking_provider_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TrackingProviderAuthorizeRequest {
        TrackingProviderAuthorizeRequest::new()
    }

    fn clear(&mut self) {
        self.tracking_provider_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TrackingProviderAuthorizeRequest {
        static instance: TrackingProviderAuthorizeRequest = TrackingProviderAuthorizeRequest {
            tracking_provider_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.TrackingProviderAuthorizeResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TrackingProviderAuthorizeResponse {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.TrackingProviderAuthorizeResponse.result)
    pub result: ::protobuf::EnumOrUnknown<super::message::response::Result>,
    // @@protoc_insertion_point(field:fx.ipc.proto.TrackingProviderAuthorizeResponse.error)
    pub error: ::protobuf::MessageField<tracking_provider::AuthorizationError>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.TrackingProviderAuthorizeResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TrackingProviderAuthorizeResponse {
    fn default() -> &'a TrackingProviderAuthorizeResponse {
        <TrackingProviderAuthorizeResponse as ::protobuf::Message>::default_instance()
    }
}

impl TrackingProviderAuthorizeResponse {
    pub fn new() -> TrackingProviderAuthorizeResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for TrackingProviderAuthorizeResponse {
    const NAME: &'static str = "TrackingProviderAuthorizeResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = is.read_enum_or_unknown()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.error)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.result != ::protobuf::EnumOrUnknown::new(super::message::response::Result::OK) {
            my_size += ::protobuf::rt::int32_size(1, self.result.value());
        }
        if let Some(v) = self.error.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.result != ::protobuf::EnumOrUnknown::new(super::message::response::Result::OK) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.result))?;
        }
        if let Some(v) = self.error.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TrackingProviderAuthorizeResponse {
        TrackingProviderAuthorizeResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::protobuf::EnumOrUnknown::new(super::message::response::Result::OK);
        self.error.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TrackingProviderAuthorizeResponse {
        static instance: TrackingProviderAuthorizeResponse = TrackingProviderAuthorizeResponse {
            result: ::protobuf::EnumOrUnknown::from_i32(0),
            error: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.TrackingProviderDisconnectRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TrackingProviderDisconnectRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.TrackingProviderDisconnectRequest.tracking_provider_id)
    pub tracking_provider_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.TrackingProviderDisconnectRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TrackingProviderDisconnectRequest {
    fn default() -> &'a TrackingProviderDisconnectRequest {
        <TrackingProviderDisconnectRequest as ::protobuf::Message>::default_instance()
    }
}

impl TrackingProviderDisconnectRequest {
    pub fn new() -> TrackingProviderDisconnectRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for TrackingProviderDisconnectRequest {
    const NAME: &'static str = "TrackingProviderDisconnectRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.tracking_provider_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.tracking_provider_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.tracking_provider_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.tracking_provider_id.is_empty() {
            os.write_string(1, &self.tracking_provider_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TrackingProviderDisconnectRequest {
        TrackingProviderDisconnectRequest::new()
    }

    fn clear(&mut self) {
        self.tracking_provider_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TrackingProviderDisconnectRequest {
        static instance: TrackingProviderDisconnectRequest = TrackingProviderDisconnectRequest {
            tracking_provider_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.TrackingProviderEvent)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TrackingProviderEvent {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.TrackingProviderEvent.event)
    pub event: ::protobuf::EnumOrUnknown<tracking_provider_event::Event>,
    // @@protoc_insertion_point(field:fx.ipc.proto.TrackingProviderEvent.authorization_state_changed)
    pub authorization_state_changed: ::protobuf::MessageField<tracking_provider_event::AuthorizationStateChanged>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.TrackingProviderEvent.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TrackingProviderEvent {
    fn default() -> &'a TrackingProviderEvent {
        <TrackingProviderEvent as ::protobuf::Message>::default_instance()
    }
}

impl TrackingProviderEvent {
    pub fn new() -> TrackingProviderEvent {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for TrackingProviderEvent {
    const NAME: &'static str = "TrackingProviderEvent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.event = is.read_enum_or_unknown()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.authorization_state_changed)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.event != ::protobuf::EnumOrUnknown::new(tracking_provider_event::Event::AUTHORIZATION_STATE_CHANGED) {
            my_size += ::protobuf::rt::int32_size(1, self.event.value());
        }
        if let Some(v) = self.authorization_state_changed.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.event != ::protobuf::EnumOrUnknown::new(tracking_provider_event::Event::AUTHORIZATION_STATE_CHANGED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.event))?;
        }
        if let Some(v) = self.authorization_state_changed.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TrackingProviderEvent {
        TrackingProviderEvent::new()
    }

    fn clear(&mut self) {
        self.event = ::protobuf::EnumOrUnknown::new(tracking_provider_event::Event::AUTHORIZATION_STATE_CHANGED);
        self.authorization_state_changed.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TrackingProviderEvent {
        static instance: TrackingProviderEvent = TrackingProviderEvent {
            event: ::protobuf::EnumOrUnknown::from_i32(0),
            authorization_state_changed: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `TrackingProviderEvent`
pub mod tracking_provider_event {
    // @@protoc_insertion_point(message:fx.ipc.proto.TrackingProviderEvent.AuthorizationStateChanged)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct AuthorizationStateChanged {
        // message fields
        // @@protoc_insertion_point(field:fx.ipc.proto.TrackingProviderEvent.AuthorizationStateChanged.state)
        pub state: ::protobuf::EnumOrUnknown<super::tracking_provider::AuthorizationState>,
        // special fields
        // @@protoc_insertion_point(special_field:fx.ipc.proto.TrackingProviderEvent.AuthorizationStateChanged.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a AuthorizationStateChanged {
        fn default() -> &'a AuthorizationStateChanged {
            <AuthorizationStateChanged as ::protobuf::Message>::default_instance()
        }
    }

    impl AuthorizationStateChanged {
        pub fn new() -> AuthorizationStateChanged {
            ::std::default::Default::default()
        }
    }

    impl ::protobuf::Message for AuthorizationStateChanged {
        const NAME: &'static str = "AuthorizationStateChanged";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.state = is.read_enum_or_unknown()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.state != ::protobuf::EnumOrUnknown::new(super::tracking_provider::AuthorizationState::AUTHORIZED) {
                my_size += ::protobuf::rt::int32_size(1, self.state.value());
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.state != ::protobuf::EnumOrUnknown::new(super::tracking_provider::AuthorizationState::AUTHORIZED) {
                os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.state))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> AuthorizationStateChanged {
            AuthorizationStateChanged::new()
        }

        fn clear(&mut self) {
            self.state = ::protobuf::EnumOrUnknown::new(super::tracking_provider::AuthorizationState::AUTHORIZED);
            self.special_fields.clear();
        }

        fn default_instance() -> &'static AuthorizationStateChanged {
            static instance: AuthorizationStateChanged = AuthorizationStateChanged {
                state: ::protobuf::EnumOrUnknown::from_i32(0),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:fx.ipc.proto.TrackingProviderEvent.Event)
    pub enum Event {
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.TrackingProviderEvent.Event.AUTHORIZATION_STATE_CHANGED)
        AUTHORIZATION_STATE_CHANGED = 0,
    }

    impl ::protobuf::Enum for Event {
        const NAME: &'static str = "Event";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Event> {
            match value {
                0 => ::std::option::Option::Some(Event::AUTHORIZATION_STATE_CHANGED),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Event> {
            match str {
                "AUTHORIZATION_STATE_CHANGED" => ::std::option::Option::Some(Event::AUTHORIZATION_STATE_CHANGED),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Event] = &[
            Event::AUTHORIZATION_STATE_CHANGED,
        ];
    }

    impl ::std::default::Default for Event {
        fn default() -> Self {
            Event::AUTHORIZATION_STATE_CHANGED
        }
    }

}
