// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc 29.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `favorites.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:fx.ipc.proto.GetIsLikedRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetIsLikedRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.GetIsLikedRequest.item)
    pub item: ::protobuf::MessageField<super::media::media::Item>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.GetIsLikedRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetIsLikedRequest {
    fn default() -> &'a GetIsLikedRequest {
        <GetIsLikedRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetIsLikedRequest {
    pub fn new() -> GetIsLikedRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetIsLikedRequest {
    const NAME: &'static str = "GetIsLikedRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.item)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.item.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.item.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetIsLikedRequest {
        GetIsLikedRequest::new()
    }

    fn clear(&mut self) {
        self.item.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetIsLikedRequest {
        static instance: GetIsLikedRequest = GetIsLikedRequest {
            item: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.GetIsLikedResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetIsLikedResponse {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.GetIsLikedResponse.is_liked)
    pub is_liked: bool,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.GetIsLikedResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetIsLikedResponse {
    fn default() -> &'a GetIsLikedResponse {
        <GetIsLikedResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetIsLikedResponse {
    pub fn new() -> GetIsLikedResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetIsLikedResponse {
    const NAME: &'static str = "GetIsLikedResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.is_liked = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.is_liked != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.is_liked != false {
            os.write_bool(2, self.is_liked)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetIsLikedResponse {
        GetIsLikedResponse::new()
    }

    fn clear(&mut self) {
        self.is_liked = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetIsLikedResponse {
        static instance: GetIsLikedResponse = GetIsLikedResponse {
            is_liked: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.AddFavoriteRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AddFavoriteRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.AddFavoriteRequest.item)
    pub item: ::protobuf::MessageField<super::media::media::Item>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.AddFavoriteRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AddFavoriteRequest {
    fn default() -> &'a AddFavoriteRequest {
        <AddFavoriteRequest as ::protobuf::Message>::default_instance()
    }
}

impl AddFavoriteRequest {
    pub fn new() -> AddFavoriteRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for AddFavoriteRequest {
    const NAME: &'static str = "AddFavoriteRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.item)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.item.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.item.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AddFavoriteRequest {
        AddFavoriteRequest::new()
    }

    fn clear(&mut self) {
        self.item.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AddFavoriteRequest {
        static instance: AddFavoriteRequest = AddFavoriteRequest {
            item: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.AddFavoriteResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AddFavoriteResponse {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.AddFavoriteResponse.result)
    pub result: ::protobuf::EnumOrUnknown<super::message::response::Result>,
    // @@protoc_insertion_point(field:fx.ipc.proto.AddFavoriteResponse.error)
    pub error: ::protobuf::MessageField<super::media::media::Error>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.AddFavoriteResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AddFavoriteResponse {
    fn default() -> &'a AddFavoriteResponse {
        <AddFavoriteResponse as ::protobuf::Message>::default_instance()
    }
}

impl AddFavoriteResponse {
    pub fn new() -> AddFavoriteResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for AddFavoriteResponse {
    const NAME: &'static str = "AddFavoriteResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = is.read_enum_or_unknown()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.error)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.result != ::protobuf::EnumOrUnknown::new(super::message::response::Result::OK) {
            my_size += ::protobuf::rt::int32_size(1, self.result.value());
        }
        if let Some(v) = self.error.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.result != ::protobuf::EnumOrUnknown::new(super::message::response::Result::OK) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.result))?;
        }
        if let Some(v) = self.error.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AddFavoriteResponse {
        AddFavoriteResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::protobuf::EnumOrUnknown::new(super::message::response::Result::OK);
        self.error.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AddFavoriteResponse {
        static instance: AddFavoriteResponse = AddFavoriteResponse {
            result: ::protobuf::EnumOrUnknown::from_i32(0),
            error: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.RemoveFavoriteRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RemoveFavoriteRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.RemoveFavoriteRequest.item)
    pub item: ::protobuf::MessageField<super::media::media::Item>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.RemoveFavoriteRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RemoveFavoriteRequest {
    fn default() -> &'a RemoveFavoriteRequest {
        <RemoveFavoriteRequest as ::protobuf::Message>::default_instance()
    }
}

impl RemoveFavoriteRequest {
    pub fn new() -> RemoveFavoriteRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for RemoveFavoriteRequest {
    const NAME: &'static str = "RemoveFavoriteRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.item)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.item.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.item.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RemoveFavoriteRequest {
        RemoveFavoriteRequest::new()
    }

    fn clear(&mut self) {
        self.item.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RemoveFavoriteRequest {
        static instance: RemoveFavoriteRequest = RemoveFavoriteRequest {
            item: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}
