// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc 29.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `events.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:fx.ipc.proto.Event)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Event {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.Event.type)
    pub type_: ::protobuf::EnumOrUnknown<event::EventType>,
    // @@protoc_insertion_point(field:fx.ipc.proto.Event.playback_state_changed)
    pub playback_state_changed: ::protobuf::MessageField<event::PlaybackStateChanged>,
    // @@protoc_insertion_point(field:fx.ipc.proto.Event.torrent_details_loaded)
    pub torrent_details_loaded: ::protobuf::MessageField<event::TorrentDetailsLoaded>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.Event.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Event {
    fn default() -> &'a Event {
        <Event as ::protobuf::Message>::default_instance()
    }
}

impl Event {
    pub fn new() -> Event {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Event {
    const NAME: &'static str = "Event";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.playback_state_changed)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.torrent_details_loaded)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(event::EventType::PLAYER_STARTED) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if let Some(v) = self.playback_state_changed.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.torrent_details_loaded.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(event::EventType::PLAYER_STARTED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if let Some(v) = self.playback_state_changed.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.torrent_details_loaded.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Event {
        Event::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(event::EventType::PLAYER_STARTED);
        self.playback_state_changed.clear();
        self.torrent_details_loaded.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Event {
        static instance: Event = Event {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            playback_state_changed: ::protobuf::MessageField::none(),
            torrent_details_loaded: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `Event`
pub mod event {
    // @@protoc_insertion_point(message:fx.ipc.proto.Event.PlaybackStateChanged)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PlaybackStateChanged {
        // message fields
        // @@protoc_insertion_point(field:fx.ipc.proto.Event.PlaybackStateChanged.new_state)
        pub new_state: ::protobuf::EnumOrUnknown<super::super::player::player::State>,
        // special fields
        // @@protoc_insertion_point(special_field:fx.ipc.proto.Event.PlaybackStateChanged.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PlaybackStateChanged {
        fn default() -> &'a PlaybackStateChanged {
            <PlaybackStateChanged as ::protobuf::Message>::default_instance()
        }
    }

    impl PlaybackStateChanged {
        pub fn new() -> PlaybackStateChanged {
            ::std::default::Default::default()
        }
    }

    impl ::protobuf::Message for PlaybackStateChanged {
        const NAME: &'static str = "PlaybackStateChanged";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.new_state = is.read_enum_or_unknown()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.new_state != ::protobuf::EnumOrUnknown::new(super::super::player::player::State::READY) {
                my_size += ::protobuf::rt::int32_size(1, self.new_state.value());
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.new_state != ::protobuf::EnumOrUnknown::new(super::super::player::player::State::READY) {
                os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.new_state))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PlaybackStateChanged {
            PlaybackStateChanged::new()
        }

        fn clear(&mut self) {
            self.new_state = ::protobuf::EnumOrUnknown::new(super::super::player::player::State::READY);
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PlaybackStateChanged {
            static instance: PlaybackStateChanged = PlaybackStateChanged {
                new_state: ::protobuf::EnumOrUnknown::from_i32(0),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:fx.ipc.proto.Event.TorrentDetailsLoaded)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct TorrentDetailsLoaded {
        // special fields
        // @@protoc_insertion_point(special_field:fx.ipc.proto.Event.TorrentDetailsLoaded.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a TorrentDetailsLoaded {
        fn default() -> &'a TorrentDetailsLoaded {
            <TorrentDetailsLoaded as ::protobuf::Message>::default_instance()
        }
    }

    impl TorrentDetailsLoaded {
        pub fn new() -> TorrentDetailsLoaded {
            ::std::default::Default::default()
        }
    }

    impl ::protobuf::Message for TorrentDetailsLoaded {
        const NAME: &'static str = "TorrentDetailsLoaded";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> TorrentDetailsLoaded {
            TorrentDetailsLoaded::new()
        }

        fn clear(&mut self) {
            self.special_fields.clear();
        }

        fn default_instance() -> &'static TorrentDetailsLoaded {
            static instance: TorrentDetailsLoaded = TorrentDetailsLoaded {
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:fx.ipc.proto.Event.EventType)
    pub enum EventType {
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Event.EventType.PLAYER_STARTED)
        PLAYER_STARTED = 0,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Event.EventType.PLAYER_STOPPED)
        PLAYER_STOPPED = 1,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Event.EventType.PLAYBACK_STATE_CHANGED)
        PLAYBACK_STATE_CHANGED = 2,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Event.EventType.LOADING_STARTED)
        LOADING_STARTED = 3,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Event.EventType.LOADING_COMPLETED)
        LOADING_COMPLETED = 4,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Event.EventType.TORRENT_DETAILS_LOADED)
        TORRENT_DETAILS_LOADED = 5,
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.Event.EventType.CLOSE_PLAYER)
        CLOSE_PLAYER = 6,
    }

    impl ::protobuf::Enum for EventType {
        const NAME: &'static str = "EventType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EventType> {
            match value {
                0 => ::std::option::Option::Some(EventType::PLAYER_STARTED),
                1 => ::std::option::Option::Some(EventType::PLAYER_STOPPED),
                2 => ::std::option::Option::Some(EventType::PLAYBACK_STATE_CHANGED),
                3 => ::std::option::Option::Some(EventType::LOADING_STARTED),
                4 => ::std::option::Option::Some(EventType::LOADING_COMPLETED),
                5 => ::std::option::Option::Some(EventType::TORRENT_DETAILS_LOADED),
                6 => ::std::option::Option::Some(EventType::CLOSE_PLAYER),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EventType> {
            match str {
                "PLAYER_STARTED" => ::std::option::Option::Some(EventType::PLAYER_STARTED),
                "PLAYER_STOPPED" => ::std::option::Option::Some(EventType::PLAYER_STOPPED),
                "PLAYBACK_STATE_CHANGED" => ::std::option::Option::Some(EventType::PLAYBACK_STATE_CHANGED),
                "LOADING_STARTED" => ::std::option::Option::Some(EventType::LOADING_STARTED),
                "LOADING_COMPLETED" => ::std::option::Option::Some(EventType::LOADING_COMPLETED),
                "TORRENT_DETAILS_LOADED" => ::std::option::Option::Some(EventType::TORRENT_DETAILS_LOADED),
                "CLOSE_PLAYER" => ::std::option::Option::Some(EventType::CLOSE_PLAYER),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EventType] = &[
            EventType::PLAYER_STARTED,
            EventType::PLAYER_STOPPED,
            EventType::PLAYBACK_STATE_CHANGED,
            EventType::LOADING_STARTED,
            EventType::LOADING_COMPLETED,
            EventType::TORRENT_DETAILS_LOADED,
            EventType::CLOSE_PLAYER,
        ];
    }

    impl ::std::default::Default for EventType {
        fn default() -> Self {
            EventType::PLAYER_STARTED
        }
    }

}
