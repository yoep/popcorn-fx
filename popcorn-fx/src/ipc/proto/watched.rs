// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc 29.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `watched.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:fx.ipc.proto.GetIsWatchedRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetIsWatchedRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.GetIsWatchedRequest.item)
    pub item: ::protobuf::MessageField<super::media::media::Item>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.GetIsWatchedRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetIsWatchedRequest {
    fn default() -> &'a GetIsWatchedRequest {
        <GetIsWatchedRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetIsWatchedRequest {
    pub fn new() -> GetIsWatchedRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetIsWatchedRequest {
    const NAME: &'static str = "GetIsWatchedRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.item)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.item.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.item.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetIsWatchedRequest {
        GetIsWatchedRequest::new()
    }

    fn clear(&mut self) {
        self.item.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetIsWatchedRequest {
        static instance: GetIsWatchedRequest = GetIsWatchedRequest {
            item: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.GetIsWatchedResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetIsWatchedResponse {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.GetIsWatchedResponse.is_watched)
    pub is_watched: bool,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.GetIsWatchedResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetIsWatchedResponse {
    fn default() -> &'a GetIsWatchedResponse {
        <GetIsWatchedResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetIsWatchedResponse {
    pub fn new() -> GetIsWatchedResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetIsWatchedResponse {
    const NAME: &'static str = "GetIsWatchedResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.is_watched = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.is_watched != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.is_watched != false {
            os.write_bool(1, self.is_watched)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetIsWatchedResponse {
        GetIsWatchedResponse::new()
    }

    fn clear(&mut self) {
        self.is_watched = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetIsWatchedResponse {
        static instance: GetIsWatchedResponse = GetIsWatchedResponse {
            is_watched: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.AddToWatchlistRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AddToWatchlistRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.AddToWatchlistRequest.item)
    pub item: ::protobuf::MessageField<super::media::media::Item>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.AddToWatchlistRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AddToWatchlistRequest {
    fn default() -> &'a AddToWatchlistRequest {
        <AddToWatchlistRequest as ::protobuf::Message>::default_instance()
    }
}

impl AddToWatchlistRequest {
    pub fn new() -> AddToWatchlistRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for AddToWatchlistRequest {
    const NAME: &'static str = "AddToWatchlistRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.item)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.item.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.item.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AddToWatchlistRequest {
        AddToWatchlistRequest::new()
    }

    fn clear(&mut self) {
        self.item.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AddToWatchlistRequest {
        static instance: AddToWatchlistRequest = AddToWatchlistRequest {
            item: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.AddToWatchlistResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AddToWatchlistResponse {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.AddToWatchlistResponse.result)
    pub result: ::protobuf::EnumOrUnknown<super::message::response::Result>,
    // @@protoc_insertion_point(field:fx.ipc.proto.AddToWatchlistResponse.error)
    pub error: ::protobuf::MessageField<super::media::media::Error>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.AddToWatchlistResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AddToWatchlistResponse {
    fn default() -> &'a AddToWatchlistResponse {
        <AddToWatchlistResponse as ::protobuf::Message>::default_instance()
    }
}

impl AddToWatchlistResponse {
    pub fn new() -> AddToWatchlistResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for AddToWatchlistResponse {
    const NAME: &'static str = "AddToWatchlistResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = is.read_enum_or_unknown()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.error)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.result != ::protobuf::EnumOrUnknown::new(super::message::response::Result::OK) {
            my_size += ::protobuf::rt::int32_size(1, self.result.value());
        }
        if let Some(v) = self.error.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.result != ::protobuf::EnumOrUnknown::new(super::message::response::Result::OK) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.result))?;
        }
        if let Some(v) = self.error.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AddToWatchlistResponse {
        AddToWatchlistResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::protobuf::EnumOrUnknown::new(super::message::response::Result::OK);
        self.error.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AddToWatchlistResponse {
        static instance: AddToWatchlistResponse = AddToWatchlistResponse {
            result: ::protobuf::EnumOrUnknown::from_i32(0),
            error: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.RemoveFromWatchlistRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RemoveFromWatchlistRequest {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.RemoveFromWatchlistRequest.item)
    pub item: ::protobuf::MessageField<super::media::media::Item>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.RemoveFromWatchlistRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RemoveFromWatchlistRequest {
    fn default() -> &'a RemoveFromWatchlistRequest {
        <RemoveFromWatchlistRequest as ::protobuf::Message>::default_instance()
    }
}

impl RemoveFromWatchlistRequest {
    pub fn new() -> RemoveFromWatchlistRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for RemoveFromWatchlistRequest {
    const NAME: &'static str = "RemoveFromWatchlistRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.item)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.item.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.item.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RemoveFromWatchlistRequest {
        RemoveFromWatchlistRequest::new()
    }

    fn clear(&mut self) {
        self.item.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RemoveFromWatchlistRequest {
        static instance: RemoveFromWatchlistRequest = RemoveFromWatchlistRequest {
            item: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.WatchedEvent)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct WatchedEvent {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.WatchedEvent.event)
    pub event: ::protobuf::EnumOrUnknown<watched_event::Event>,
    // @@protoc_insertion_point(field:fx.ipc.proto.WatchedEvent.watched_state_changed)
    pub watched_state_changed: ::protobuf::MessageField<watched_event::WatchedStateChanged>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.WatchedEvent.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WatchedEvent {
    fn default() -> &'a WatchedEvent {
        <WatchedEvent as ::protobuf::Message>::default_instance()
    }
}

impl WatchedEvent {
    pub fn new() -> WatchedEvent {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for WatchedEvent {
    const NAME: &'static str = "WatchedEvent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.event = is.read_enum_or_unknown()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.watched_state_changed)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.event != ::protobuf::EnumOrUnknown::new(watched_event::Event::STATE_CHANGED) {
            my_size += ::protobuf::rt::int32_size(1, self.event.value());
        }
        if let Some(v) = self.watched_state_changed.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.event != ::protobuf::EnumOrUnknown::new(watched_event::Event::STATE_CHANGED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.event))?;
        }
        if let Some(v) = self.watched_state_changed.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WatchedEvent {
        WatchedEvent::new()
    }

    fn clear(&mut self) {
        self.event = ::protobuf::EnumOrUnknown::new(watched_event::Event::STATE_CHANGED);
        self.watched_state_changed.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WatchedEvent {
        static instance: WatchedEvent = WatchedEvent {
            event: ::protobuf::EnumOrUnknown::from_i32(0),
            watched_state_changed: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `WatchedEvent`
pub mod watched_event {
    // @@protoc_insertion_point(message:fx.ipc.proto.WatchedEvent.WatchedStateChanged)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct WatchedStateChanged {
        // message fields
        // @@protoc_insertion_point(field:fx.ipc.proto.WatchedEvent.WatchedStateChanged.imdb_id)
        pub imdb_id: ::std::string::String,
        // @@protoc_insertion_point(field:fx.ipc.proto.WatchedEvent.WatchedStateChanged.new_state)
        pub new_state: bool,
        // special fields
        // @@protoc_insertion_point(special_field:fx.ipc.proto.WatchedEvent.WatchedStateChanged.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a WatchedStateChanged {
        fn default() -> &'a WatchedStateChanged {
            <WatchedStateChanged as ::protobuf::Message>::default_instance()
        }
    }

    impl WatchedStateChanged {
        pub fn new() -> WatchedStateChanged {
            ::std::default::Default::default()
        }
    }

    impl ::protobuf::Message for WatchedStateChanged {
        const NAME: &'static str = "WatchedStateChanged";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.imdb_id = is.read_string()?;
                    },
                    16 => {
                        self.new_state = is.read_bool()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.imdb_id.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.imdb_id);
            }
            if self.new_state != false {
                my_size += 1 + 1;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.imdb_id.is_empty() {
                os.write_string(1, &self.imdb_id)?;
            }
            if self.new_state != false {
                os.write_bool(2, self.new_state)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> WatchedStateChanged {
            WatchedStateChanged::new()
        }

        fn clear(&mut self) {
            self.imdb_id.clear();
            self.new_state = false;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static WatchedStateChanged {
            static instance: WatchedStateChanged = WatchedStateChanged {
                imdb_id: ::std::string::String::new(),
                new_state: false,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:fx.ipc.proto.WatchedEvent.Event)
    pub enum Event {
        // @@protoc_insertion_point(enum_value:fx.ipc.proto.WatchedEvent.Event.STATE_CHANGED)
        STATE_CHANGED = 0,
    }

    impl ::protobuf::Enum for Event {
        const NAME: &'static str = "Event";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Event> {
            match value {
                0 => ::std::option::Option::Some(Event::STATE_CHANGED),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Event> {
            match str {
                "STATE_CHANGED" => ::std::option::Option::Some(Event::STATE_CHANGED),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Event] = &[
            Event::STATE_CHANGED,
        ];
    }

    impl ::std::default::Default for Event {
        fn default() -> Self {
            Event::STATE_CHANGED
        }
    }

}
