// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc 29.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `application.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:fx.ipc.proto.ApplicationArgsRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ApplicationArgsRequest {
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.ApplicationArgsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ApplicationArgsRequest {
    fn default() -> &'a ApplicationArgsRequest {
        <ApplicationArgsRequest as ::protobuf::Message>::default_instance()
    }
}

impl ApplicationArgsRequest {
    pub fn new() -> ApplicationArgsRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ApplicationArgsRequest {
    const NAME: &'static str = "ApplicationArgsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ApplicationArgsRequest {
        ApplicationArgsRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ApplicationArgsRequest {
        static instance: ApplicationArgsRequest = ApplicationArgsRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.ApplicationArgsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ApplicationArgsResponse {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.ApplicationArgsResponse.args)
    pub args: ::protobuf::MessageField<ApplicationArgs>,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.ApplicationArgsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ApplicationArgsResponse {
    fn default() -> &'a ApplicationArgsResponse {
        <ApplicationArgsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ApplicationArgsResponse {
    pub fn new() -> ApplicationArgsResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ApplicationArgsResponse {
    const NAME: &'static str = "ApplicationArgsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.args)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.args.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.args.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ApplicationArgsResponse {
        ApplicationArgsResponse::new()
    }

    fn clear(&mut self) {
        self.args.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ApplicationArgsResponse {
        static instance: ApplicationArgsResponse = ApplicationArgsResponse {
            args: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.ApplicationArgs)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ApplicationArgs {
    // message fields
    // @@protoc_insertion_point(field:fx.ipc.proto.ApplicationArgs.is_tv_mode)
    pub is_tv_mode: bool,
    // @@protoc_insertion_point(field:fx.ipc.proto.ApplicationArgs.is_maximized)
    pub is_maximized: bool,
    // @@protoc_insertion_point(field:fx.ipc.proto.ApplicationArgs.is_kiosk_mode)
    pub is_kiosk_mode: bool,
    // @@protoc_insertion_point(field:fx.ipc.proto.ApplicationArgs.is_mouse_disabled)
    pub is_mouse_disabled: bool,
    // @@protoc_insertion_point(field:fx.ipc.proto.ApplicationArgs.is_youtube_player_enabled)
    pub is_youtube_player_enabled: bool,
    // @@protoc_insertion_point(field:fx.ipc.proto.ApplicationArgs.is_vlc_video_player_enabled)
    pub is_vlc_video_player_enabled: bool,
    // @@protoc_insertion_point(field:fx.ipc.proto.ApplicationArgs.is_fx_player_enabled)
    pub is_fx_player_enabled: bool,
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.ApplicationArgs.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ApplicationArgs {
    fn default() -> &'a ApplicationArgs {
        <ApplicationArgs as ::protobuf::Message>::default_instance()
    }
}

impl ApplicationArgs {
    pub fn new() -> ApplicationArgs {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ApplicationArgs {
    const NAME: &'static str = "ApplicationArgs";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.is_tv_mode = is.read_bool()?;
                },
                16 => {
                    self.is_maximized = is.read_bool()?;
                },
                24 => {
                    self.is_kiosk_mode = is.read_bool()?;
                },
                32 => {
                    self.is_mouse_disabled = is.read_bool()?;
                },
                40 => {
                    self.is_youtube_player_enabled = is.read_bool()?;
                },
                48 => {
                    self.is_vlc_video_player_enabled = is.read_bool()?;
                },
                56 => {
                    self.is_fx_player_enabled = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.is_tv_mode != false {
            my_size += 1 + 1;
        }
        if self.is_maximized != false {
            my_size += 1 + 1;
        }
        if self.is_kiosk_mode != false {
            my_size += 1 + 1;
        }
        if self.is_mouse_disabled != false {
            my_size += 1 + 1;
        }
        if self.is_youtube_player_enabled != false {
            my_size += 1 + 1;
        }
        if self.is_vlc_video_player_enabled != false {
            my_size += 1 + 1;
        }
        if self.is_fx_player_enabled != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.is_tv_mode != false {
            os.write_bool(1, self.is_tv_mode)?;
        }
        if self.is_maximized != false {
            os.write_bool(2, self.is_maximized)?;
        }
        if self.is_kiosk_mode != false {
            os.write_bool(3, self.is_kiosk_mode)?;
        }
        if self.is_mouse_disabled != false {
            os.write_bool(4, self.is_mouse_disabled)?;
        }
        if self.is_youtube_player_enabled != false {
            os.write_bool(5, self.is_youtube_player_enabled)?;
        }
        if self.is_vlc_video_player_enabled != false {
            os.write_bool(6, self.is_vlc_video_player_enabled)?;
        }
        if self.is_fx_player_enabled != false {
            os.write_bool(7, self.is_fx_player_enabled)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ApplicationArgs {
        ApplicationArgs::new()
    }

    fn clear(&mut self) {
        self.is_tv_mode = false;
        self.is_maximized = false;
        self.is_kiosk_mode = false;
        self.is_mouse_disabled = false;
        self.is_youtube_player_enabled = false;
        self.is_vlc_video_player_enabled = false;
        self.is_fx_player_enabled = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ApplicationArgs {
        static instance: ApplicationArgs = ApplicationArgs {
            is_tv_mode: false,
            is_maximized: false,
            is_kiosk_mode: false,
            is_mouse_disabled: false,
            is_youtube_player_enabled: false,
            is_vlc_video_player_enabled: false,
            is_fx_player_enabled: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:fx.ipc.proto.ApplicationTerminationRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ApplicationTerminationRequest {
    // special fields
    // @@protoc_insertion_point(special_field:fx.ipc.proto.ApplicationTerminationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ApplicationTerminationRequest {
    fn default() -> &'a ApplicationTerminationRequest {
        <ApplicationTerminationRequest as ::protobuf::Message>::default_instance()
    }
}

impl ApplicationTerminationRequest {
    pub fn new() -> ApplicationTerminationRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ApplicationTerminationRequest {
    const NAME: &'static str = "ApplicationTerminationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ApplicationTerminationRequest {
        ApplicationTerminationRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ApplicationTerminationRequest {
        static instance: ApplicationTerminationRequest = ApplicationTerminationRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}
